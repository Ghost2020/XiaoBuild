// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build_progress.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_build_5fprogress_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_build_5fprogress_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_build_5fprogress_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_build_5fprogress_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_build_5fprogress_2eproto;
class FBuildProgress;
struct FBuildProgressDefaultTypeInternal;
extern FBuildProgressDefaultTypeInternal _FBuildProgress_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FBuildProgress* Arena::CreateMaybeMessage<::FBuildProgress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FBuildProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FBuildProgress) */ {
 public:
  inline FBuildProgress() : FBuildProgress(nullptr) {}
  ~FBuildProgress() override;
  explicit constexpr FBuildProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FBuildProgress(const FBuildProgress& from);
  FBuildProgress(FBuildProgress&& from) noexcept
    : FBuildProgress() {
    *this = ::std::move(from);
  }

  inline FBuildProgress& operator=(const FBuildProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline FBuildProgress& operator=(FBuildProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FBuildProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const FBuildProgress* internal_default_instance() {
    return reinterpret_cast<const FBuildProgress*>(
               &_FBuildProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FBuildProgress& a, FBuildProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(FBuildProgress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FBuildProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FBuildProgress* New() const final {
    return new FBuildProgress();
  }

  FBuildProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FBuildProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FBuildProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FBuildProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FBuildProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FBuildProgress";
  }
  protected:
  explicit FBuildProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kProgressFieldNumber = 2,
    kCurrentIndexFieldNumber = 3,
    kTotalCountFieldNumber = 4,
  };
  // int32 Status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float Progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // int32 CurrentIndex = 3;
  void clear_currentindex();
  ::PROTOBUF_NAMESPACE_ID::int32 currentindex() const;
  void set_currentindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentindex() const;
  void _internal_set_currentindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TotalCount = 4;
  void clear_totalcount();
  ::PROTOBUF_NAMESPACE_ID::int32 totalcount() const;
  void set_totalcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_totalcount() const;
  void _internal_set_totalcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FBuildProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  float progress_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 totalcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_5fprogress_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FBuildProgress

// int32 Status = 1;
inline void FBuildProgress::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FBuildProgress::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FBuildProgress::status() const {
  // @@protoc_insertion_point(field_get:FBuildProgress.Status)
  return _internal_status();
}
inline void FBuildProgress::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void FBuildProgress::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:FBuildProgress.Status)
}

// float Progress = 2;
inline void FBuildProgress::clear_progress() {
  progress_ = 0;
}
inline float FBuildProgress::_internal_progress() const {
  return progress_;
}
inline float FBuildProgress::progress() const {
  // @@protoc_insertion_point(field_get:FBuildProgress.Progress)
  return _internal_progress();
}
inline void FBuildProgress::_internal_set_progress(float value) {
  
  progress_ = value;
}
inline void FBuildProgress::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:FBuildProgress.Progress)
}

// int32 CurrentIndex = 3;
inline void FBuildProgress::clear_currentindex() {
  currentindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FBuildProgress::_internal_currentindex() const {
  return currentindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FBuildProgress::currentindex() const {
  // @@protoc_insertion_point(field_get:FBuildProgress.CurrentIndex)
  return _internal_currentindex();
}
inline void FBuildProgress::_internal_set_currentindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentindex_ = value;
}
inline void FBuildProgress::set_currentindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentindex(value);
  // @@protoc_insertion_point(field_set:FBuildProgress.CurrentIndex)
}

// int32 TotalCount = 4;
inline void FBuildProgress::clear_totalcount() {
  totalcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FBuildProgress::_internal_totalcount() const {
  return totalcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FBuildProgress::totalcount() const {
  // @@protoc_insertion_point(field_get:FBuildProgress.TotalCount)
  return _internal_totalcount();
}
inline void FBuildProgress::_internal_set_totalcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  totalcount_ = value;
}
inline void FBuildProgress::set_totalcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_totalcount(value);
  // @@protoc_insertion_point(field_set:FBuildProgress.TotalCount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_build_5fprogress_2eproto
