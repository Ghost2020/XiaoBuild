// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_task_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_task_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_task_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_task_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_2eproto;
class FTaskProto;
struct FTaskProtoDefaultTypeInternal;
extern FTaskProtoDefaultTypeInternal _FTaskProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FTaskProto* Arena::CreateMaybeMessage<::FTaskProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FTaskProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FTaskProto) */ {
 public:
  inline FTaskProto() : FTaskProto(nullptr) {}
  ~FTaskProto() override;
  explicit constexpr FTaskProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FTaskProto(const FTaskProto& from);
  FTaskProto(FTaskProto&& from) noexcept
    : FTaskProto() {
    *this = ::std::move(from);
  }

  inline FTaskProto& operator=(const FTaskProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FTaskProto& operator=(FTaskProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FTaskProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FTaskProto* internal_default_instance() {
    return reinterpret_cast<const FTaskProto*>(
               &_FTaskProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FTaskProto& a, FTaskProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FTaskProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FTaskProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FTaskProto* New() const final {
    return new FTaskProto();
  }

  FTaskProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FTaskProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FTaskProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FTaskProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FTaskProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FTaskProto";
  }
  protected:
  explicit FTaskProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependenceFieldNumber = 5,
    kCaptionFieldNumber = 1,
    kCmdFieldNumber = 2,
    kParamsFieldNumber = 3,
    kGroupFieldNumber = 4,
    kAllowRemoteFieldNumber = 6,
    kWaitFieldNumber = 7,
    kPriorityFieldNumber = 8,
  };
  // repeated string dependence = 5;
  int dependence_size() const;
  private:
  int _internal_dependence_size() const;
  public:
  void clear_dependence();
  const std::string& dependence(int index) const;
  std::string* mutable_dependence(int index);
  void set_dependence(int index, const std::string& value);
  void set_dependence(int index, std::string&& value);
  void set_dependence(int index, const char* value);
  void set_dependence(int index, const char* value, size_t size);
  std::string* add_dependence();
  void add_dependence(const std::string& value);
  void add_dependence(std::string&& value);
  void add_dependence(const char* value);
  void add_dependence(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependence() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependence();
  private:
  const std::string& _internal_dependence(int index) const;
  std::string* _internal_add_dependence();
  public:

  // string caption = 1;
  void clear_caption();
  const std::string& caption() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_caption(ArgT0&& arg0, ArgT... args);
  std::string* mutable_caption();
  PROTOBUF_MUST_USE_RESULT std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // string cmd = 2;
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_MUST_USE_RESULT std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // string params = 3;
  void clear_params();
  const std::string& params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_params();
  PROTOBUF_MUST_USE_RESULT std::string* release_params();
  void set_allocated_params(std::string* params);
  private:
  const std::string& _internal_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_params(const std::string& value);
  std::string* _internal_mutable_params();
  public:

  // string group = 4;
  void clear_group();
  const std::string& group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group();
  PROTOBUF_MUST_USE_RESULT std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // bool allow_remote = 6;
  void clear_allow_remote();
  bool allow_remote() const;
  void set_allow_remote(bool value);
  private:
  bool _internal_allow_remote() const;
  void _internal_set_allow_remote(bool value);
  public:

  // bool wait = 7;
  void clear_wait();
  bool wait() const;
  void set_wait(bool value);
  private:
  bool _internal_wait() const;
  void _internal_set_wait(bool value);
  public:

  // int32 priority = 8;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FTaskProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  bool allow_remote_;
  bool wait_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_task_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FTaskProto

// string caption = 1;
inline void FTaskProto::clear_caption() {
  caption_.ClearToEmpty();
}
inline const std::string& FTaskProto::caption() const {
  // @@protoc_insertion_point(field_get:FTaskProto.caption)
  return _internal_caption();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FTaskProto::set_caption(ArgT0&& arg0, ArgT... args) {
 
 caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FTaskProto.caption)
}
inline std::string* FTaskProto::mutable_caption() {
  std::string* _s = _internal_mutable_caption();
  // @@protoc_insertion_point(field_mutable:FTaskProto.caption)
  return _s;
}
inline const std::string& FTaskProto::_internal_caption() const {
  return caption_.Get();
}
inline void FTaskProto::_internal_set_caption(const std::string& value) {
  
  caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FTaskProto::_internal_mutable_caption() {
  
  return caption_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FTaskProto::release_caption() {
  // @@protoc_insertion_point(field_release:FTaskProto.caption)
  return caption_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FTaskProto::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    
  } else {
    
  }
  caption_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FTaskProto.caption)
}

// string cmd = 2;
inline void FTaskProto::clear_cmd() {
  cmd_.ClearToEmpty();
}
inline const std::string& FTaskProto::cmd() const {
  // @@protoc_insertion_point(field_get:FTaskProto.cmd)
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FTaskProto::set_cmd(ArgT0&& arg0, ArgT... args) {
 
 cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FTaskProto.cmd)
}
inline std::string* FTaskProto::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:FTaskProto.cmd)
  return _s;
}
inline const std::string& FTaskProto::_internal_cmd() const {
  return cmd_.Get();
}
inline void FTaskProto::_internal_set_cmd(const std::string& value) {
  
  cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FTaskProto::_internal_mutable_cmd() {
  
  return cmd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FTaskProto::release_cmd() {
  // @@protoc_insertion_point(field_release:FTaskProto.cmd)
  return cmd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FTaskProto::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FTaskProto.cmd)
}

// string params = 3;
inline void FTaskProto::clear_params() {
  params_.ClearToEmpty();
}
inline const std::string& FTaskProto::params() const {
  // @@protoc_insertion_point(field_get:FTaskProto.params)
  return _internal_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FTaskProto::set_params(ArgT0&& arg0, ArgT... args) {
 
 params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FTaskProto.params)
}
inline std::string* FTaskProto::mutable_params() {
  std::string* _s = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:FTaskProto.params)
  return _s;
}
inline const std::string& FTaskProto::_internal_params() const {
  return params_.Get();
}
inline void FTaskProto::_internal_set_params(const std::string& value) {
  
  params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FTaskProto::_internal_mutable_params() {
  
  return params_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FTaskProto::release_params() {
  // @@protoc_insertion_point(field_release:FTaskProto.params)
  return params_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FTaskProto::set_allocated_params(std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  params_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), params,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FTaskProto.params)
}

// string group = 4;
inline void FTaskProto::clear_group() {
  group_.ClearToEmpty();
}
inline const std::string& FTaskProto::group() const {
  // @@protoc_insertion_point(field_get:FTaskProto.group)
  return _internal_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FTaskProto::set_group(ArgT0&& arg0, ArgT... args) {
 
 group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FTaskProto.group)
}
inline std::string* FTaskProto::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:FTaskProto.group)
  return _s;
}
inline const std::string& FTaskProto::_internal_group() const {
  return group_.Get();
}
inline void FTaskProto::_internal_set_group(const std::string& value) {
  
  group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FTaskProto::_internal_mutable_group() {
  
  return group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FTaskProto::release_group() {
  // @@protoc_insertion_point(field_release:FTaskProto.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FTaskProto::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FTaskProto.group)
}

// repeated string dependence = 5;
inline int FTaskProto::_internal_dependence_size() const {
  return dependence_.size();
}
inline int FTaskProto::dependence_size() const {
  return _internal_dependence_size();
}
inline void FTaskProto::clear_dependence() {
  dependence_.Clear();
}
inline std::string* FTaskProto::add_dependence() {
  std::string* _s = _internal_add_dependence();
  // @@protoc_insertion_point(field_add_mutable:FTaskProto.dependence)
  return _s;
}
inline const std::string& FTaskProto::_internal_dependence(int index) const {
  return dependence_.Get(index);
}
inline const std::string& FTaskProto::dependence(int index) const {
  // @@protoc_insertion_point(field_get:FTaskProto.dependence)
  return _internal_dependence(index);
}
inline std::string* FTaskProto::mutable_dependence(int index) {
  // @@protoc_insertion_point(field_mutable:FTaskProto.dependence)
  return dependence_.Mutable(index);
}
inline void FTaskProto::set_dependence(int index, const std::string& value) {
  dependence_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:FTaskProto.dependence)
}
inline void FTaskProto::set_dependence(int index, std::string&& value) {
  dependence_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:FTaskProto.dependence)
}
inline void FTaskProto::set_dependence(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dependence_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FTaskProto.dependence)
}
inline void FTaskProto::set_dependence(int index, const char* value, size_t size) {
  dependence_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FTaskProto.dependence)
}
inline std::string* FTaskProto::_internal_add_dependence() {
  return dependence_.Add();
}
inline void FTaskProto::add_dependence(const std::string& value) {
  dependence_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FTaskProto.dependence)
}
inline void FTaskProto::add_dependence(std::string&& value) {
  dependence_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FTaskProto.dependence)
}
inline void FTaskProto::add_dependence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dependence_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FTaskProto.dependence)
}
inline void FTaskProto::add_dependence(const char* value, size_t size) {
  dependence_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FTaskProto.dependence)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FTaskProto::dependence() const {
  // @@protoc_insertion_point(field_list:FTaskProto.dependence)
  return dependence_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FTaskProto::mutable_dependence() {
  // @@protoc_insertion_point(field_mutable_list:FTaskProto.dependence)
  return &dependence_;
}

// bool allow_remote = 6;
inline void FTaskProto::clear_allow_remote() {
  allow_remote_ = false;
}
inline bool FTaskProto::_internal_allow_remote() const {
  return allow_remote_;
}
inline bool FTaskProto::allow_remote() const {
  // @@protoc_insertion_point(field_get:FTaskProto.allow_remote)
  return _internal_allow_remote();
}
inline void FTaskProto::_internal_set_allow_remote(bool value) {
  
  allow_remote_ = value;
}
inline void FTaskProto::set_allow_remote(bool value) {
  _internal_set_allow_remote(value);
  // @@protoc_insertion_point(field_set:FTaskProto.allow_remote)
}

// bool wait = 7;
inline void FTaskProto::clear_wait() {
  wait_ = false;
}
inline bool FTaskProto::_internal_wait() const {
  return wait_;
}
inline bool FTaskProto::wait() const {
  // @@protoc_insertion_point(field_get:FTaskProto.wait)
  return _internal_wait();
}
inline void FTaskProto::_internal_set_wait(bool value) {
  
  wait_ = value;
}
inline void FTaskProto::set_wait(bool value) {
  _internal_set_wait(value);
  // @@protoc_insertion_point(field_set:FTaskProto.wait)
}

// int32 priority = 8;
inline void FTaskProto::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FTaskProto::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FTaskProto::priority() const {
  // @@protoc_insertion_point(field_get:FTaskProto.priority)
  return _internal_priority();
}
inline void FTaskProto::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void FTaskProto::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:FTaskProto.priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_task_2eproto
