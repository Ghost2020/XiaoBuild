// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_settings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_5fsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_5fsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_5fsettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_5fsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_system_5fsettings_2eproto;
class FSystemSettings;
struct FSystemSettingsDefaultTypeInternal;
extern FSystemSettingsDefaultTypeInternal _FSystemSettings_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FSystemSettings* Arena::CreateMaybeMessage<::FSystemSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FSystemSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FSystemSettings) */ {
 public:
  inline FSystemSettings() : FSystemSettings(nullptr) {}
  ~FSystemSettings() override;
  explicit constexpr FSystemSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FSystemSettings(const FSystemSettings& from);
  FSystemSettings(FSystemSettings&& from) noexcept
    : FSystemSettings() {
    *this = ::std::move(from);
  }

  inline FSystemSettings& operator=(const FSystemSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline FSystemSettings& operator=(FSystemSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FSystemSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const FSystemSettings* internal_default_instance() {
    return reinterpret_cast<const FSystemSettings*>(
               &_FSystemSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FSystemSettings& a, FSystemSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(FSystemSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FSystemSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FSystemSettings* New() const final {
    return new FSystemSettings();
  }

  FSystemSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FSystemSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FSystemSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FSystemSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FSystemSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FSystemSettings";
  }
  protected:
  explicit FSystemSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHardDiskMinimalFieldNumber = 1,
    kVirtualMemoryMinimalFieldNumber = 2,
    kPhysicalMemoryFieldNumber = 3,
    kCpuAvailableMinimalFieldNumber = 4,
    kHelperCoreAvailablePercentMinimalFieldNumber = 5,
    kNetworkAvaMinFieldNumber = 6,
    kGpuAvaMinFieldNumber = 7,
    kAgentServicePortFieldNumber = 9,
    kWebUIPortFieldNumber = 10,
    kCoordiServicePortFieldNumber = 11,
    kLicenseServicePortFieldNumber = 12,
    kCacheServicePortFieldNumber = 13,
    kSyncFreqFieldNumber = 14,
    kBEnableHelperFieldNumber = 8,
    kBEncyptTransportFieldNumber = 15,
    kBForbidenStanbyFieldNumber = 16,
    kBShowWindowsFireFieldNumber = 17,
    kMaxCoreNumFieldNumber = 19,
    kMaxInitiatorNumFieldNumber = 20,
    kMaxConNumFieldNumber = 21,
    kBHelperEnhanceFieldNumber = 18,
    kBScheduleCleanFieldNumber = 22,
    kBIgnoreArchFieldNumber = 25,
    kScheduleTimeFieldNumber = 24,
  };
  // float HardDiskMinimal = 1;
  void clear_harddiskminimal();
  float harddiskminimal() const;
  void set_harddiskminimal(float value);
  private:
  float _internal_harddiskminimal() const;
  void _internal_set_harddiskminimal(float value);
  public:

  // float VirtualMemoryMinimal = 2;
  void clear_virtualmemoryminimal();
  float virtualmemoryminimal() const;
  void set_virtualmemoryminimal(float value);
  private:
  float _internal_virtualmemoryminimal() const;
  void _internal_set_virtualmemoryminimal(float value);
  public:

  // float PhysicalMemory = 3;
  void clear_physicalmemory();
  float physicalmemory() const;
  void set_physicalmemory(float value);
  private:
  float _internal_physicalmemory() const;
  void _internal_set_physicalmemory(float value);
  public:

  // float CpuAvailableMinimal = 4;
  void clear_cpuavailableminimal();
  float cpuavailableminimal() const;
  void set_cpuavailableminimal(float value);
  private:
  float _internal_cpuavailableminimal() const;
  void _internal_set_cpuavailableminimal(float value);
  public:

  // float HelperCoreAvailablePercentMinimal = 5;
  void clear_helpercoreavailablepercentminimal();
  float helpercoreavailablepercentminimal() const;
  void set_helpercoreavailablepercentminimal(float value);
  private:
  float _internal_helpercoreavailablepercentminimal() const;
  void _internal_set_helpercoreavailablepercentminimal(float value);
  public:

  // float NetworkAvaMin = 6;
  void clear_networkavamin();
  float networkavamin() const;
  void set_networkavamin(float value);
  private:
  float _internal_networkavamin() const;
  void _internal_set_networkavamin(float value);
  public:

  // float GpuAvaMin = 7;
  void clear_gpuavamin();
  float gpuavamin() const;
  void set_gpuavamin(float value);
  private:
  float _internal_gpuavamin() const;
  void _internal_set_gpuavamin(float value);
  public:

  // uint32 AgentServicePort = 9;
  void clear_agentserviceport();
  ::PROTOBUF_NAMESPACE_ID::uint32 agentserviceport() const;
  void set_agentserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_agentserviceport() const;
  void _internal_set_agentserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 WebUIPort = 10;
  void clear_webuiport();
  ::PROTOBUF_NAMESPACE_ID::uint32 webuiport() const;
  void set_webuiport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_webuiport() const;
  void _internal_set_webuiport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 CoordiServicePort = 11;
  void clear_coordiserviceport();
  ::PROTOBUF_NAMESPACE_ID::uint32 coordiserviceport() const;
  void set_coordiserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coordiserviceport() const;
  void _internal_set_coordiserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 LicenseServicePort = 12;
  void clear_licenseserviceport();
  ::PROTOBUF_NAMESPACE_ID::uint32 licenseserviceport() const;
  void set_licenseserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_licenseserviceport() const;
  void _internal_set_licenseserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 CacheServicePort = 13;
  void clear_cacheserviceport();
  ::PROTOBUF_NAMESPACE_ID::uint32 cacheserviceport() const;
  void set_cacheserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cacheserviceport() const;
  void _internal_set_cacheserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SyncFreq = 14;
  void clear_syncfreq();
  ::PROTOBUF_NAMESPACE_ID::uint32 syncfreq() const;
  void set_syncfreq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_syncfreq() const;
  void _internal_set_syncfreq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool bEnableHelper = 8;
  void clear_benablehelper();
  bool benablehelper() const;
  void set_benablehelper(bool value);
  private:
  bool _internal_benablehelper() const;
  void _internal_set_benablehelper(bool value);
  public:

  // bool bEncyptTransport = 15;
  void clear_bencypttransport();
  bool bencypttransport() const;
  void set_bencypttransport(bool value);
  private:
  bool _internal_bencypttransport() const;
  void _internal_set_bencypttransport(bool value);
  public:

  // bool bForbidenStanby = 16;
  void clear_bforbidenstanby();
  bool bforbidenstanby() const;
  void set_bforbidenstanby(bool value);
  private:
  bool _internal_bforbidenstanby() const;
  void _internal_set_bforbidenstanby(bool value);
  public:

  // bool bShowWindowsFire = 17;
  void clear_bshowwindowsfire();
  bool bshowwindowsfire() const;
  void set_bshowwindowsfire(bool value);
  private:
  bool _internal_bshowwindowsfire() const;
  void _internal_set_bshowwindowsfire(bool value);
  public:

  // uint32 MaxCoreNum = 19;
  void clear_maxcorenum();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxcorenum() const;
  void set_maxcorenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxcorenum() const;
  void _internal_set_maxcorenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxInitiatorNum = 20;
  void clear_maxinitiatornum();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxinitiatornum() const;
  void set_maxinitiatornum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxinitiatornum() const;
  void _internal_set_maxinitiatornum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxConNum = 21;
  void clear_maxconnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxconnum() const;
  void set_maxconnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxconnum() const;
  void _internal_set_maxconnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool bHelperEnhance = 18;
  void clear_bhelperenhance();
  bool bhelperenhance() const;
  void set_bhelperenhance(bool value);
  private:
  bool _internal_bhelperenhance() const;
  void _internal_set_bhelperenhance(bool value);
  public:

  // bool bScheduleClean = 22;
  void clear_bscheduleclean();
  bool bscheduleclean() const;
  void set_bscheduleclean(bool value);
  private:
  bool _internal_bscheduleclean() const;
  void _internal_set_bscheduleclean(bool value);
  public:

  // bool bIgnoreArch = 25;
  void clear_bignorearch();
  bool bignorearch() const;
  void set_bignorearch(bool value);
  private:
  bool _internal_bignorearch() const;
  void _internal_set_bignorearch(bool value);
  public:

  // uint32 ScheduleTime = 24;
  void clear_scheduletime();
  ::PROTOBUF_NAMESPACE_ID::uint32 scheduletime() const;
  void set_scheduletime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scheduletime() const;
  void _internal_set_scheduletime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FSystemSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float harddiskminimal_;
  float virtualmemoryminimal_;
  float physicalmemory_;
  float cpuavailableminimal_;
  float helpercoreavailablepercentminimal_;
  float networkavamin_;
  float gpuavamin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 agentserviceport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 webuiport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coordiserviceport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 licenseserviceport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cacheserviceport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 syncfreq_;
  bool benablehelper_;
  bool bencypttransport_;
  bool bforbidenstanby_;
  bool bshowwindowsfire_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxcorenum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxinitiatornum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxconnum_;
  bool bhelperenhance_;
  bool bscheduleclean_;
  bool bignorearch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scheduletime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_5fsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FSystemSettings

// float HardDiskMinimal = 1;
inline void FSystemSettings::clear_harddiskminimal() {
  harddiskminimal_ = 0;
}
inline float FSystemSettings::_internal_harddiskminimal() const {
  return harddiskminimal_;
}
inline float FSystemSettings::harddiskminimal() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.HardDiskMinimal)
  return _internal_harddiskminimal();
}
inline void FSystemSettings::_internal_set_harddiskminimal(float value) {
  
  harddiskminimal_ = value;
}
inline void FSystemSettings::set_harddiskminimal(float value) {
  _internal_set_harddiskminimal(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.HardDiskMinimal)
}

// float VirtualMemoryMinimal = 2;
inline void FSystemSettings::clear_virtualmemoryminimal() {
  virtualmemoryminimal_ = 0;
}
inline float FSystemSettings::_internal_virtualmemoryminimal() const {
  return virtualmemoryminimal_;
}
inline float FSystemSettings::virtualmemoryminimal() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.VirtualMemoryMinimal)
  return _internal_virtualmemoryminimal();
}
inline void FSystemSettings::_internal_set_virtualmemoryminimal(float value) {
  
  virtualmemoryminimal_ = value;
}
inline void FSystemSettings::set_virtualmemoryminimal(float value) {
  _internal_set_virtualmemoryminimal(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.VirtualMemoryMinimal)
}

// float PhysicalMemory = 3;
inline void FSystemSettings::clear_physicalmemory() {
  physicalmemory_ = 0;
}
inline float FSystemSettings::_internal_physicalmemory() const {
  return physicalmemory_;
}
inline float FSystemSettings::physicalmemory() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.PhysicalMemory)
  return _internal_physicalmemory();
}
inline void FSystemSettings::_internal_set_physicalmemory(float value) {
  
  physicalmemory_ = value;
}
inline void FSystemSettings::set_physicalmemory(float value) {
  _internal_set_physicalmemory(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.PhysicalMemory)
}

// float CpuAvailableMinimal = 4;
inline void FSystemSettings::clear_cpuavailableminimal() {
  cpuavailableminimal_ = 0;
}
inline float FSystemSettings::_internal_cpuavailableminimal() const {
  return cpuavailableminimal_;
}
inline float FSystemSettings::cpuavailableminimal() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.CpuAvailableMinimal)
  return _internal_cpuavailableminimal();
}
inline void FSystemSettings::_internal_set_cpuavailableminimal(float value) {
  
  cpuavailableminimal_ = value;
}
inline void FSystemSettings::set_cpuavailableminimal(float value) {
  _internal_set_cpuavailableminimal(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.CpuAvailableMinimal)
}

// float HelperCoreAvailablePercentMinimal = 5;
inline void FSystemSettings::clear_helpercoreavailablepercentminimal() {
  helpercoreavailablepercentminimal_ = 0;
}
inline float FSystemSettings::_internal_helpercoreavailablepercentminimal() const {
  return helpercoreavailablepercentminimal_;
}
inline float FSystemSettings::helpercoreavailablepercentminimal() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.HelperCoreAvailablePercentMinimal)
  return _internal_helpercoreavailablepercentminimal();
}
inline void FSystemSettings::_internal_set_helpercoreavailablepercentminimal(float value) {
  
  helpercoreavailablepercentminimal_ = value;
}
inline void FSystemSettings::set_helpercoreavailablepercentminimal(float value) {
  _internal_set_helpercoreavailablepercentminimal(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.HelperCoreAvailablePercentMinimal)
}

// float NetworkAvaMin = 6;
inline void FSystemSettings::clear_networkavamin() {
  networkavamin_ = 0;
}
inline float FSystemSettings::_internal_networkavamin() const {
  return networkavamin_;
}
inline float FSystemSettings::networkavamin() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.NetworkAvaMin)
  return _internal_networkavamin();
}
inline void FSystemSettings::_internal_set_networkavamin(float value) {
  
  networkavamin_ = value;
}
inline void FSystemSettings::set_networkavamin(float value) {
  _internal_set_networkavamin(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.NetworkAvaMin)
}

// float GpuAvaMin = 7;
inline void FSystemSettings::clear_gpuavamin() {
  gpuavamin_ = 0;
}
inline float FSystemSettings::_internal_gpuavamin() const {
  return gpuavamin_;
}
inline float FSystemSettings::gpuavamin() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.GpuAvaMin)
  return _internal_gpuavamin();
}
inline void FSystemSettings::_internal_set_gpuavamin(float value) {
  
  gpuavamin_ = value;
}
inline void FSystemSettings::set_gpuavamin(float value) {
  _internal_set_gpuavamin(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.GpuAvaMin)
}

// bool bEnableHelper = 8;
inline void FSystemSettings::clear_benablehelper() {
  benablehelper_ = false;
}
inline bool FSystemSettings::_internal_benablehelper() const {
  return benablehelper_;
}
inline bool FSystemSettings::benablehelper() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.bEnableHelper)
  return _internal_benablehelper();
}
inline void FSystemSettings::_internal_set_benablehelper(bool value) {
  
  benablehelper_ = value;
}
inline void FSystemSettings::set_benablehelper(bool value) {
  _internal_set_benablehelper(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.bEnableHelper)
}

// uint32 AgentServicePort = 9;
inline void FSystemSettings::clear_agentserviceport() {
  agentserviceport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_agentserviceport() const {
  return agentserviceport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::agentserviceport() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.AgentServicePort)
  return _internal_agentserviceport();
}
inline void FSystemSettings::_internal_set_agentserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  agentserviceport_ = value;
}
inline void FSystemSettings::set_agentserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_agentserviceport(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.AgentServicePort)
}

// uint32 WebUIPort = 10;
inline void FSystemSettings::clear_webuiport() {
  webuiport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_webuiport() const {
  return webuiport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::webuiport() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.WebUIPort)
  return _internal_webuiport();
}
inline void FSystemSettings::_internal_set_webuiport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  webuiport_ = value;
}
inline void FSystemSettings::set_webuiport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_webuiport(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.WebUIPort)
}

// uint32 CoordiServicePort = 11;
inline void FSystemSettings::clear_coordiserviceport() {
  coordiserviceport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_coordiserviceport() const {
  return coordiserviceport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::coordiserviceport() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.CoordiServicePort)
  return _internal_coordiserviceport();
}
inline void FSystemSettings::_internal_set_coordiserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  coordiserviceport_ = value;
}
inline void FSystemSettings::set_coordiserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coordiserviceport(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.CoordiServicePort)
}

// uint32 LicenseServicePort = 12;
inline void FSystemSettings::clear_licenseserviceport() {
  licenseserviceport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_licenseserviceport() const {
  return licenseserviceport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::licenseserviceport() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.LicenseServicePort)
  return _internal_licenseserviceport();
}
inline void FSystemSettings::_internal_set_licenseserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  licenseserviceport_ = value;
}
inline void FSystemSettings::set_licenseserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_licenseserviceport(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.LicenseServicePort)
}

// uint32 CacheServicePort = 13;
inline void FSystemSettings::clear_cacheserviceport() {
  cacheserviceport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_cacheserviceport() const {
  return cacheserviceport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::cacheserviceport() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.CacheServicePort)
  return _internal_cacheserviceport();
}
inline void FSystemSettings::_internal_set_cacheserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cacheserviceport_ = value;
}
inline void FSystemSettings::set_cacheserviceport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cacheserviceport(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.CacheServicePort)
}

// uint32 SyncFreq = 14;
inline void FSystemSettings::clear_syncfreq() {
  syncfreq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_syncfreq() const {
  return syncfreq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::syncfreq() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.SyncFreq)
  return _internal_syncfreq();
}
inline void FSystemSettings::_internal_set_syncfreq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  syncfreq_ = value;
}
inline void FSystemSettings::set_syncfreq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_syncfreq(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.SyncFreq)
}

// bool bEncyptTransport = 15;
inline void FSystemSettings::clear_bencypttransport() {
  bencypttransport_ = false;
}
inline bool FSystemSettings::_internal_bencypttransport() const {
  return bencypttransport_;
}
inline bool FSystemSettings::bencypttransport() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.bEncyptTransport)
  return _internal_bencypttransport();
}
inline void FSystemSettings::_internal_set_bencypttransport(bool value) {
  
  bencypttransport_ = value;
}
inline void FSystemSettings::set_bencypttransport(bool value) {
  _internal_set_bencypttransport(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.bEncyptTransport)
}

// bool bForbidenStanby = 16;
inline void FSystemSettings::clear_bforbidenstanby() {
  bforbidenstanby_ = false;
}
inline bool FSystemSettings::_internal_bforbidenstanby() const {
  return bforbidenstanby_;
}
inline bool FSystemSettings::bforbidenstanby() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.bForbidenStanby)
  return _internal_bforbidenstanby();
}
inline void FSystemSettings::_internal_set_bforbidenstanby(bool value) {
  
  bforbidenstanby_ = value;
}
inline void FSystemSettings::set_bforbidenstanby(bool value) {
  _internal_set_bforbidenstanby(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.bForbidenStanby)
}

// bool bShowWindowsFire = 17;
inline void FSystemSettings::clear_bshowwindowsfire() {
  bshowwindowsfire_ = false;
}
inline bool FSystemSettings::_internal_bshowwindowsfire() const {
  return bshowwindowsfire_;
}
inline bool FSystemSettings::bshowwindowsfire() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.bShowWindowsFire)
  return _internal_bshowwindowsfire();
}
inline void FSystemSettings::_internal_set_bshowwindowsfire(bool value) {
  
  bshowwindowsfire_ = value;
}
inline void FSystemSettings::set_bshowwindowsfire(bool value) {
  _internal_set_bshowwindowsfire(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.bShowWindowsFire)
}

// bool bHelperEnhance = 18;
inline void FSystemSettings::clear_bhelperenhance() {
  bhelperenhance_ = false;
}
inline bool FSystemSettings::_internal_bhelperenhance() const {
  return bhelperenhance_;
}
inline bool FSystemSettings::bhelperenhance() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.bHelperEnhance)
  return _internal_bhelperenhance();
}
inline void FSystemSettings::_internal_set_bhelperenhance(bool value) {
  
  bhelperenhance_ = value;
}
inline void FSystemSettings::set_bhelperenhance(bool value) {
  _internal_set_bhelperenhance(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.bHelperEnhance)
}

// uint32 MaxCoreNum = 19;
inline void FSystemSettings::clear_maxcorenum() {
  maxcorenum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_maxcorenum() const {
  return maxcorenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::maxcorenum() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.MaxCoreNum)
  return _internal_maxcorenum();
}
inline void FSystemSettings::_internal_set_maxcorenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxcorenum_ = value;
}
inline void FSystemSettings::set_maxcorenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxcorenum(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.MaxCoreNum)
}

// uint32 MaxInitiatorNum = 20;
inline void FSystemSettings::clear_maxinitiatornum() {
  maxinitiatornum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_maxinitiatornum() const {
  return maxinitiatornum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::maxinitiatornum() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.MaxInitiatorNum)
  return _internal_maxinitiatornum();
}
inline void FSystemSettings::_internal_set_maxinitiatornum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxinitiatornum_ = value;
}
inline void FSystemSettings::set_maxinitiatornum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxinitiatornum(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.MaxInitiatorNum)
}

// uint32 MaxConNum = 21;
inline void FSystemSettings::clear_maxconnum() {
  maxconnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_maxconnum() const {
  return maxconnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::maxconnum() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.MaxConNum)
  return _internal_maxconnum();
}
inline void FSystemSettings::_internal_set_maxconnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxconnum_ = value;
}
inline void FSystemSettings::set_maxconnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxconnum(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.MaxConNum)
}

// bool bScheduleClean = 22;
inline void FSystemSettings::clear_bscheduleclean() {
  bscheduleclean_ = false;
}
inline bool FSystemSettings::_internal_bscheduleclean() const {
  return bscheduleclean_;
}
inline bool FSystemSettings::bscheduleclean() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.bScheduleClean)
  return _internal_bscheduleclean();
}
inline void FSystemSettings::_internal_set_bscheduleclean(bool value) {
  
  bscheduleclean_ = value;
}
inline void FSystemSettings::set_bscheduleclean(bool value) {
  _internal_set_bscheduleclean(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.bScheduleClean)
}

// uint32 ScheduleTime = 24;
inline void FSystemSettings::clear_scheduletime() {
  scheduletime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::_internal_scheduletime() const {
  return scheduletime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FSystemSettings::scheduletime() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.ScheduleTime)
  return _internal_scheduletime();
}
inline void FSystemSettings::_internal_set_scheduletime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  scheduletime_ = value;
}
inline void FSystemSettings::set_scheduletime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scheduletime(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.ScheduleTime)
}

// bool bIgnoreArch = 25;
inline void FSystemSettings::clear_bignorearch() {
  bignorearch_ = false;
}
inline bool FSystemSettings::_internal_bignorearch() const {
  return bignorearch_;
}
inline bool FSystemSettings::bignorearch() const {
  // @@protoc_insertion_point(field_get:FSystemSettings.bIgnoreArch)
  return _internal_bignorearch();
}
inline void FSystemSettings::_internal_set_bignorearch(bool value) {
  
  bignorearch_ = value;
}
inline void FSystemSettings::set_bignorearch(bool value) {
  _internal_set_bignorearch(value);
  // @@protoc_insertion_point(field_set:FSystemSettings.bIgnoreArch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_5fsettings_2eproto
