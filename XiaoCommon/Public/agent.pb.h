// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_agent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_agent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_agent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_agent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agent_2eproto;
class FAgentArrayProto;
struct FAgentArrayProtoDefaultTypeInternal;
extern FAgentArrayProtoDefaultTypeInternal _FAgentArrayProto_default_instance_;
class FAgentProto;
struct FAgentProtoDefaultTypeInternal;
extern FAgentProtoDefaultTypeInternal _FAgentProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FAgentArrayProto* Arena::CreateMaybeMessage<::FAgentArrayProto>(Arena*);
template<> ::FAgentProto* Arena::CreateMaybeMessage<::FAgentProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FAgentProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FAgentProto) */ {
 public:
  inline FAgentProto() : FAgentProto(nullptr) {}
  ~FAgentProto() override;
  explicit constexpr FAgentProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FAgentProto(const FAgentProto& from);
  FAgentProto(FAgentProto&& from) noexcept
    : FAgentProto() {
    *this = ::std::move(from);
  }

  inline FAgentProto& operator=(const FAgentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FAgentProto& operator=(FAgentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FAgentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FAgentProto* internal_default_instance() {
    return reinterpret_cast<const FAgentProto*>(
               &_FAgentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FAgentProto& a, FAgentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FAgentProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FAgentProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FAgentProto* New() const final {
    return new FAgentProto();
  }

  FAgentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FAgentProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FAgentProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FAgentProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FAgentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FAgentProto";
  }
  protected:
  explicit FAgentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kDescFieldNumber = 4,
    kGroupFieldNumber = 5,
    kLastConFieldNumber = 7,
    kCpuInfoFieldNumber = 13,
    kIpFieldNumber = 16,
    kLoginUserFieldNumber = 18,
    kMacAddressFieldNumber = 23,
    kOpSystemFieldNumber = 26,
    kRouterIpFieldNumber = 28,
    kUpDownTimeFieldNumber = 30,
    kIdFieldNumber = 35,
    kMessageFieldNumber = 37,
    kCpuArchFieldNumber = 47,
    kPortMappedAddressFieldNumber = 48,
    kStatusFieldNumber = 1,
    kTypeFieldNumber = 3,
    kCpuAvaFieldNumber = 6,
    kTotalHelpCacheFieldNumber = 8,
    kUseHelpCacheFieldNumber = 9,
    kHelperCoreFieldNumber = 10,
    kBuildPriorityFieldNumber = 12,
    kTotalHardSpaceFieldNumber = 14,
    kUseHardSpaceFieldNumber = 15,
    kLogLevelFieldNumber = 17,
    kAllocationPriorityFieldNumber = 19,
    kTotalMemoryFieldNumber = 20,
    kUseMemoryFieldNumber = 21,
    kLogicCoreFieldNumber = 22,
    kBBuildCacheFieldNumber = 11,
    kBLocalConnectionFieldNumber = 24,
    kBUpOrDownFieldNumber = 29,
    kBEnableInitatorFieldNumber = 31,
    kNetworkSpeedFieldNumber = 25,
    kPhysicalCoreFieldNumber = 27,
    kBFixedInitatorFieldNumber = 32,
    kBEnableHelperFieldNumber = 33,
    kBFixedHelperFieldNumber = 34,
    kBSubscribeFieldNumber = 36,
    kHelperPortFieldNumber = 38,
    kIndexFieldNumber = 39,
    kLastUpdateFieldNumber = 40,
    kMaxConFieldNumber = 41,
    kMaxCpuFieldNumber = 42,
    kTracePortFieldNumber = 43,
    kLocalMaxCpuFieldNumber = 44,
    kAvalNetFieldNumber = 45,
    kAvaGpuFieldNumber = 46,
  };
  // string Username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string Desc = 4;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string Group = 5;
  void clear_group();
  const std::string& group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group();
  PROTOBUF_MUST_USE_RESULT std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // string LastCon = 7;
  void clear_lastcon();
  const std::string& lastcon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastcon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastcon();
  PROTOBUF_MUST_USE_RESULT std::string* release_lastcon();
  void set_allocated_lastcon(std::string* lastcon);
  private:
  const std::string& _internal_lastcon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastcon(const std::string& value);
  std::string* _internal_mutable_lastcon();
  public:

  // string CpuInfo = 13;
  void clear_cpuinfo();
  const std::string& cpuinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpuinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpuinfo();
  PROTOBUF_MUST_USE_RESULT std::string* release_cpuinfo();
  void set_allocated_cpuinfo(std::string* cpuinfo);
  private:
  const std::string& _internal_cpuinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpuinfo(const std::string& value);
  std::string* _internal_mutable_cpuinfo();
  public:

  // string Ip = 16;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string LoginUser = 18;
  void clear_loginuser();
  const std::string& loginuser() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loginuser(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loginuser();
  PROTOBUF_MUST_USE_RESULT std::string* release_loginuser();
  void set_allocated_loginuser(std::string* loginuser);
  private:
  const std::string& _internal_loginuser() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loginuser(const std::string& value);
  std::string* _internal_mutable_loginuser();
  public:

  // string MacAddress = 23;
  void clear_macaddress();
  const std::string& macaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_macaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_macaddress();
  PROTOBUF_MUST_USE_RESULT std::string* release_macaddress();
  void set_allocated_macaddress(std::string* macaddress);
  private:
  const std::string& _internal_macaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_macaddress(const std::string& value);
  std::string* _internal_mutable_macaddress();
  public:

  // string OpSystem = 26;
  void clear_opsystem();
  const std::string& opsystem() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opsystem(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opsystem();
  PROTOBUF_MUST_USE_RESULT std::string* release_opsystem();
  void set_allocated_opsystem(std::string* opsystem);
  private:
  const std::string& _internal_opsystem() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opsystem(const std::string& value);
  std::string* _internal_mutable_opsystem();
  public:

  // string RouterIp = 28;
  void clear_routerip();
  const std::string& routerip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routerip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routerip();
  PROTOBUF_MUST_USE_RESULT std::string* release_routerip();
  void set_allocated_routerip(std::string* routerip);
  private:
  const std::string& _internal_routerip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routerip(const std::string& value);
  std::string* _internal_mutable_routerip();
  public:

  // string UpDownTime = 30;
  void clear_updowntime();
  const std::string& updowntime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updowntime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updowntime();
  PROTOBUF_MUST_USE_RESULT std::string* release_updowntime();
  void set_allocated_updowntime(std::string* updowntime);
  private:
  const std::string& _internal_updowntime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updowntime(const std::string& value);
  std::string* _internal_mutable_updowntime();
  public:

  // string Id = 35;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string message = 37;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string CpuArch = 47;
  void clear_cpuarch();
  const std::string& cpuarch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpuarch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpuarch();
  PROTOBUF_MUST_USE_RESULT std::string* release_cpuarch();
  void set_allocated_cpuarch(std::string* cpuarch);
  private:
  const std::string& _internal_cpuarch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpuarch(const std::string& value);
  std::string* _internal_mutable_cpuarch();
  public:

  // string PortMappedAddress = 48;
  void clear_portmappedaddress();
  const std::string& portmappedaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_portmappedaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_portmappedaddress();
  PROTOBUF_MUST_USE_RESULT std::string* release_portmappedaddress();
  void set_allocated_portmappedaddress(std::string* portmappedaddress);
  private:
  const std::string& _internal_portmappedaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_portmappedaddress(const std::string& value);
  std::string* _internal_mutable_portmappedaddress();
  public:

  // int32 Status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float CpuAva = 6;
  void clear_cpuava();
  float cpuava() const;
  void set_cpuava(float value);
  private:
  float _internal_cpuava() const;
  void _internal_set_cpuava(float value);
  public:

  // float TotalHelpCache = 8;
  void clear_totalhelpcache();
  float totalhelpcache() const;
  void set_totalhelpcache(float value);
  private:
  float _internal_totalhelpcache() const;
  void _internal_set_totalhelpcache(float value);
  public:

  // float UseHelpCache = 9;
  void clear_usehelpcache();
  float usehelpcache() const;
  void set_usehelpcache(float value);
  private:
  float _internal_usehelpcache() const;
  void _internal_set_usehelpcache(float value);
  public:

  // int32 HelperCore = 10;
  void clear_helpercore();
  ::PROTOBUF_NAMESPACE_ID::int32 helpercore() const;
  void set_helpercore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_helpercore() const;
  void _internal_set_helpercore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BuildPriority = 12;
  void clear_buildpriority();
  ::PROTOBUF_NAMESPACE_ID::int32 buildpriority() const;
  void set_buildpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buildpriority() const;
  void _internal_set_buildpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float TotalHardSpace = 14;
  void clear_totalhardspace();
  float totalhardspace() const;
  void set_totalhardspace(float value);
  private:
  float _internal_totalhardspace() const;
  void _internal_set_totalhardspace(float value);
  public:

  // float UseHardSpace = 15;
  void clear_usehardspace();
  float usehardspace() const;
  void set_usehardspace(float value);
  private:
  float _internal_usehardspace() const;
  void _internal_set_usehardspace(float value);
  public:

  // int32 LogLevel = 17;
  void clear_loglevel();
  ::PROTOBUF_NAMESPACE_ID::int32 loglevel() const;
  void set_loglevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_loglevel() const;
  void _internal_set_loglevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 AllocationPriority = 19;
  void clear_allocationpriority();
  ::PROTOBUF_NAMESPACE_ID::int32 allocationpriority() const;
  void set_allocationpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_allocationpriority() const;
  void _internal_set_allocationpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float TotalMemory = 20;
  void clear_totalmemory();
  float totalmemory() const;
  void set_totalmemory(float value);
  private:
  float _internal_totalmemory() const;
  void _internal_set_totalmemory(float value);
  public:

  // float UseMemory = 21;
  void clear_usememory();
  float usememory() const;
  void set_usememory(float value);
  private:
  float _internal_usememory() const;
  void _internal_set_usememory(float value);
  public:

  // int32 LogicCore = 22;
  void clear_logiccore();
  ::PROTOBUF_NAMESPACE_ID::int32 logiccore() const;
  void set_logiccore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logiccore() const;
  void _internal_set_logiccore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bBuildCache = 11;
  void clear_bbuildcache();
  bool bbuildcache() const;
  void set_bbuildcache(bool value);
  private:
  bool _internal_bbuildcache() const;
  void _internal_set_bbuildcache(bool value);
  public:

  // bool bLocalConnection = 24;
  void clear_blocalconnection();
  bool blocalconnection() const;
  void set_blocalconnection(bool value);
  private:
  bool _internal_blocalconnection() const;
  void _internal_set_blocalconnection(bool value);
  public:

  // bool bUpOrDown = 29;
  void clear_bupordown();
  bool bupordown() const;
  void set_bupordown(bool value);
  private:
  bool _internal_bupordown() const;
  void _internal_set_bupordown(bool value);
  public:

  // bool bEnableInitator = 31;
  void clear_benableinitator();
  bool benableinitator() const;
  void set_benableinitator(bool value);
  private:
  bool _internal_benableinitator() const;
  void _internal_set_benableinitator(bool value);
  public:

  // float NetworkSpeed = 25;
  void clear_networkspeed();
  float networkspeed() const;
  void set_networkspeed(float value);
  private:
  float _internal_networkspeed() const;
  void _internal_set_networkspeed(float value);
  public:

  // int32 PhysicalCore = 27;
  void clear_physicalcore();
  ::PROTOBUF_NAMESPACE_ID::int32 physicalcore() const;
  void set_physicalcore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_physicalcore() const;
  void _internal_set_physicalcore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bFixedInitator = 32;
  void clear_bfixedinitator();
  bool bfixedinitator() const;
  void set_bfixedinitator(bool value);
  private:
  bool _internal_bfixedinitator() const;
  void _internal_set_bfixedinitator(bool value);
  public:

  // bool bEnableHelper = 33;
  void clear_benablehelper();
  bool benablehelper() const;
  void set_benablehelper(bool value);
  private:
  bool _internal_benablehelper() const;
  void _internal_set_benablehelper(bool value);
  public:

  // bool bFixedHelper = 34;
  void clear_bfixedhelper();
  bool bfixedhelper() const;
  void set_bfixedhelper(bool value);
  private:
  bool _internal_bfixedhelper() const;
  void _internal_set_bfixedhelper(bool value);
  public:

  // bool bSubscribe = 36;
  void clear_bsubscribe();
  bool bsubscribe() const;
  void set_bsubscribe(bool value);
  private:
  bool _internal_bsubscribe() const;
  void _internal_set_bsubscribe(bool value);
  public:

  // int32 HelperPort = 38;
  void clear_helperport();
  ::PROTOBUF_NAMESPACE_ID::int32 helperport() const;
  void set_helperport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_helperport() const;
  void _internal_set_helperport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Index = 39;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 LastUpdate = 40;
  void clear_lastupdate();
  ::PROTOBUF_NAMESPACE_ID::int64 lastupdate() const;
  void set_lastupdate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastupdate() const;
  void _internal_set_lastupdate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 MaxCon = 41;
  void clear_maxcon();
  ::PROTOBUF_NAMESPACE_ID::int32 maxcon() const;
  void set_maxcon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxcon() const;
  void _internal_set_maxcon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaxCpu = 42;
  void clear_maxcpu();
  ::PROTOBUF_NAMESPACE_ID::int32 maxcpu() const;
  void set_maxcpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxcpu() const;
  void _internal_set_maxcpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TracePort = 43;
  void clear_traceport();
  ::PROTOBUF_NAMESPACE_ID::int32 traceport() const;
  void set_traceport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_traceport() const;
  void _internal_set_traceport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LocalMaxCpu = 44;
  void clear_localmaxcpu();
  ::PROTOBUF_NAMESPACE_ID::int32 localmaxcpu() const;
  void set_localmaxcpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_localmaxcpu() const;
  void _internal_set_localmaxcpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float AvalNet = 45;
  void clear_avalnet();
  float avalnet() const;
  void set_avalnet(float value);
  private:
  float _internal_avalnet() const;
  void _internal_set_avalnet(float value);
  public:

  // float AvaGpu = 46;
  void clear_avagpu();
  float avagpu() const;
  void set_avagpu(float value);
  private:
  float _internal_avagpu() const;
  void _internal_set_avagpu(float value);
  public:

  // @@protoc_insertion_point(class_scope:FAgentProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastcon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginuser_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opsystem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routerip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updowntime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuarch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr portmappedaddress_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float cpuava_;
  float totalhelpcache_;
  float usehelpcache_;
  ::PROTOBUF_NAMESPACE_ID::int32 helpercore_;
  ::PROTOBUF_NAMESPACE_ID::int32 buildpriority_;
  float totalhardspace_;
  float usehardspace_;
  ::PROTOBUF_NAMESPACE_ID::int32 loglevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 allocationpriority_;
  float totalmemory_;
  float usememory_;
  ::PROTOBUF_NAMESPACE_ID::int32 logiccore_;
  bool bbuildcache_;
  bool blocalconnection_;
  bool bupordown_;
  bool benableinitator_;
  float networkspeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 physicalcore_;
  bool bfixedinitator_;
  bool benablehelper_;
  bool bfixedhelper_;
  bool bsubscribe_;
  ::PROTOBUF_NAMESPACE_ID::int32 helperport_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastupdate_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxcon_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxcpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 traceport_;
  ::PROTOBUF_NAMESPACE_ID::int32 localmaxcpu_;
  float avalnet_;
  float avagpu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agent_2eproto;
};
// -------------------------------------------------------------------

class FAgentArrayProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FAgentArrayProto) */ {
 public:
  inline FAgentArrayProto() : FAgentArrayProto(nullptr) {}
  ~FAgentArrayProto() override;
  explicit constexpr FAgentArrayProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FAgentArrayProto(const FAgentArrayProto& from);
  FAgentArrayProto(FAgentArrayProto&& from) noexcept
    : FAgentArrayProto() {
    *this = ::std::move(from);
  }

  inline FAgentArrayProto& operator=(const FAgentArrayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FAgentArrayProto& operator=(FAgentArrayProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FAgentArrayProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FAgentArrayProto* internal_default_instance() {
    return reinterpret_cast<const FAgentArrayProto*>(
               &_FAgentArrayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FAgentArrayProto& a, FAgentArrayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FAgentArrayProto* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FAgentArrayProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FAgentArrayProto* New() const final {
    return new FAgentArrayProto();
  }

  FAgentArrayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FAgentArrayProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FAgentArrayProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FAgentArrayProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FAgentArrayProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FAgentArrayProto";
  }
  protected:
  explicit FAgentArrayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
  };
  // repeated .FAgentProto Agents = 1;
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::FAgentProto* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FAgentProto >*
      mutable_agents();
  private:
  const ::FAgentProto& _internal_agents(int index) const;
  ::FAgentProto* _internal_add_agents();
  public:
  const ::FAgentProto& agents(int index) const;
  ::FAgentProto* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FAgentProto >&
      agents() const;

  // @@protoc_insertion_point(class_scope:FAgentArrayProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FAgentProto > agents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FAgentProto

// int32 Status = 1;
inline void FAgentProto::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::status() const {
  // @@protoc_insertion_point(field_get:FAgentProto.Status)
  return _internal_status();
}
inline void FAgentProto::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void FAgentProto::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:FAgentProto.Status)
}

// string Username = 2;
inline void FAgentProto::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& FAgentProto::username() const {
  // @@protoc_insertion_point(field_get:FAgentProto.Username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.Username)
}
inline std::string* FAgentProto::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:FAgentProto.Username)
  return _s;
}
inline const std::string& FAgentProto::_internal_username() const {
  return username_.Get();
}
inline void FAgentProto::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_username() {
  // @@protoc_insertion_point(field_release:FAgentProto.Username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.Username)
}

// int32 Type = 3;
inline void FAgentProto::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::type() const {
  // @@protoc_insertion_point(field_get:FAgentProto.Type)
  return _internal_type();
}
inline void FAgentProto::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void FAgentProto::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:FAgentProto.Type)
}

// string Desc = 4;
inline void FAgentProto::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& FAgentProto::desc() const {
  // @@protoc_insertion_point(field_get:FAgentProto.Desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.Desc)
}
inline std::string* FAgentProto::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:FAgentProto.Desc)
  return _s;
}
inline const std::string& FAgentProto::_internal_desc() const {
  return desc_.Get();
}
inline void FAgentProto::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_desc() {
  // @@protoc_insertion_point(field_release:FAgentProto.Desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.Desc)
}

// string Group = 5;
inline void FAgentProto::clear_group() {
  group_.ClearToEmpty();
}
inline const std::string& FAgentProto::group() const {
  // @@protoc_insertion_point(field_get:FAgentProto.Group)
  return _internal_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_group(ArgT0&& arg0, ArgT... args) {
 
 group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.Group)
}
inline std::string* FAgentProto::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:FAgentProto.Group)
  return _s;
}
inline const std::string& FAgentProto::_internal_group() const {
  return group_.Get();
}
inline void FAgentProto::_internal_set_group(const std::string& value) {
  
  group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_group() {
  
  return group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_group() {
  // @@protoc_insertion_point(field_release:FAgentProto.Group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.Group)
}

// float CpuAva = 6;
inline void FAgentProto::clear_cpuava() {
  cpuava_ = 0;
}
inline float FAgentProto::_internal_cpuava() const {
  return cpuava_;
}
inline float FAgentProto::cpuava() const {
  // @@protoc_insertion_point(field_get:FAgentProto.CpuAva)
  return _internal_cpuava();
}
inline void FAgentProto::_internal_set_cpuava(float value) {
  
  cpuava_ = value;
}
inline void FAgentProto::set_cpuava(float value) {
  _internal_set_cpuava(value);
  // @@protoc_insertion_point(field_set:FAgentProto.CpuAva)
}

// string LastCon = 7;
inline void FAgentProto::clear_lastcon() {
  lastcon_.ClearToEmpty();
}
inline const std::string& FAgentProto::lastcon() const {
  // @@protoc_insertion_point(field_get:FAgentProto.LastCon)
  return _internal_lastcon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_lastcon(ArgT0&& arg0, ArgT... args) {
 
 lastcon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.LastCon)
}
inline std::string* FAgentProto::mutable_lastcon() {
  std::string* _s = _internal_mutable_lastcon();
  // @@protoc_insertion_point(field_mutable:FAgentProto.LastCon)
  return _s;
}
inline const std::string& FAgentProto::_internal_lastcon() const {
  return lastcon_.Get();
}
inline void FAgentProto::_internal_set_lastcon(const std::string& value) {
  
  lastcon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_lastcon() {
  
  return lastcon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_lastcon() {
  // @@protoc_insertion_point(field_release:FAgentProto.LastCon)
  return lastcon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_lastcon(std::string* lastcon) {
  if (lastcon != nullptr) {
    
  } else {
    
  }
  lastcon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastcon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.LastCon)
}

// float TotalHelpCache = 8;
inline void FAgentProto::clear_totalhelpcache() {
  totalhelpcache_ = 0;
}
inline float FAgentProto::_internal_totalhelpcache() const {
  return totalhelpcache_;
}
inline float FAgentProto::totalhelpcache() const {
  // @@protoc_insertion_point(field_get:FAgentProto.TotalHelpCache)
  return _internal_totalhelpcache();
}
inline void FAgentProto::_internal_set_totalhelpcache(float value) {
  
  totalhelpcache_ = value;
}
inline void FAgentProto::set_totalhelpcache(float value) {
  _internal_set_totalhelpcache(value);
  // @@protoc_insertion_point(field_set:FAgentProto.TotalHelpCache)
}

// float UseHelpCache = 9;
inline void FAgentProto::clear_usehelpcache() {
  usehelpcache_ = 0;
}
inline float FAgentProto::_internal_usehelpcache() const {
  return usehelpcache_;
}
inline float FAgentProto::usehelpcache() const {
  // @@protoc_insertion_point(field_get:FAgentProto.UseHelpCache)
  return _internal_usehelpcache();
}
inline void FAgentProto::_internal_set_usehelpcache(float value) {
  
  usehelpcache_ = value;
}
inline void FAgentProto::set_usehelpcache(float value) {
  _internal_set_usehelpcache(value);
  // @@protoc_insertion_point(field_set:FAgentProto.UseHelpCache)
}

// int32 HelperCore = 10;
inline void FAgentProto::clear_helpercore() {
  helpercore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_helpercore() const {
  return helpercore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::helpercore() const {
  // @@protoc_insertion_point(field_get:FAgentProto.HelperCore)
  return _internal_helpercore();
}
inline void FAgentProto::_internal_set_helpercore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  helpercore_ = value;
}
inline void FAgentProto::set_helpercore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_helpercore(value);
  // @@protoc_insertion_point(field_set:FAgentProto.HelperCore)
}

// bool bBuildCache = 11;
inline void FAgentProto::clear_bbuildcache() {
  bbuildcache_ = false;
}
inline bool FAgentProto::_internal_bbuildcache() const {
  return bbuildcache_;
}
inline bool FAgentProto::bbuildcache() const {
  // @@protoc_insertion_point(field_get:FAgentProto.bBuildCache)
  return _internal_bbuildcache();
}
inline void FAgentProto::_internal_set_bbuildcache(bool value) {
  
  bbuildcache_ = value;
}
inline void FAgentProto::set_bbuildcache(bool value) {
  _internal_set_bbuildcache(value);
  // @@protoc_insertion_point(field_set:FAgentProto.bBuildCache)
}

// int32 BuildPriority = 12;
inline void FAgentProto::clear_buildpriority() {
  buildpriority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_buildpriority() const {
  return buildpriority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::buildpriority() const {
  // @@protoc_insertion_point(field_get:FAgentProto.BuildPriority)
  return _internal_buildpriority();
}
inline void FAgentProto::_internal_set_buildpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buildpriority_ = value;
}
inline void FAgentProto::set_buildpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buildpriority(value);
  // @@protoc_insertion_point(field_set:FAgentProto.BuildPriority)
}

// string CpuInfo = 13;
inline void FAgentProto::clear_cpuinfo() {
  cpuinfo_.ClearToEmpty();
}
inline const std::string& FAgentProto::cpuinfo() const {
  // @@protoc_insertion_point(field_get:FAgentProto.CpuInfo)
  return _internal_cpuinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_cpuinfo(ArgT0&& arg0, ArgT... args) {
 
 cpuinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.CpuInfo)
}
inline std::string* FAgentProto::mutable_cpuinfo() {
  std::string* _s = _internal_mutable_cpuinfo();
  // @@protoc_insertion_point(field_mutable:FAgentProto.CpuInfo)
  return _s;
}
inline const std::string& FAgentProto::_internal_cpuinfo() const {
  return cpuinfo_.Get();
}
inline void FAgentProto::_internal_set_cpuinfo(const std::string& value) {
  
  cpuinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_cpuinfo() {
  
  return cpuinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_cpuinfo() {
  // @@protoc_insertion_point(field_release:FAgentProto.CpuInfo)
  return cpuinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_cpuinfo(std::string* cpuinfo) {
  if (cpuinfo != nullptr) {
    
  } else {
    
  }
  cpuinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuinfo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.CpuInfo)
}

// float TotalHardSpace = 14;
inline void FAgentProto::clear_totalhardspace() {
  totalhardspace_ = 0;
}
inline float FAgentProto::_internal_totalhardspace() const {
  return totalhardspace_;
}
inline float FAgentProto::totalhardspace() const {
  // @@protoc_insertion_point(field_get:FAgentProto.TotalHardSpace)
  return _internal_totalhardspace();
}
inline void FAgentProto::_internal_set_totalhardspace(float value) {
  
  totalhardspace_ = value;
}
inline void FAgentProto::set_totalhardspace(float value) {
  _internal_set_totalhardspace(value);
  // @@protoc_insertion_point(field_set:FAgentProto.TotalHardSpace)
}

// float UseHardSpace = 15;
inline void FAgentProto::clear_usehardspace() {
  usehardspace_ = 0;
}
inline float FAgentProto::_internal_usehardspace() const {
  return usehardspace_;
}
inline float FAgentProto::usehardspace() const {
  // @@protoc_insertion_point(field_get:FAgentProto.UseHardSpace)
  return _internal_usehardspace();
}
inline void FAgentProto::_internal_set_usehardspace(float value) {
  
  usehardspace_ = value;
}
inline void FAgentProto::set_usehardspace(float value) {
  _internal_set_usehardspace(value);
  // @@protoc_insertion_point(field_set:FAgentProto.UseHardSpace)
}

// string Ip = 16;
inline void FAgentProto::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& FAgentProto::ip() const {
  // @@protoc_insertion_point(field_get:FAgentProto.Ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.Ip)
}
inline std::string* FAgentProto::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:FAgentProto.Ip)
  return _s;
}
inline const std::string& FAgentProto::_internal_ip() const {
  return ip_.Get();
}
inline void FAgentProto::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_ip() {
  // @@protoc_insertion_point(field_release:FAgentProto.Ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.Ip)
}

// int32 LogLevel = 17;
inline void FAgentProto::clear_loglevel() {
  loglevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_loglevel() const {
  return loglevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::loglevel() const {
  // @@protoc_insertion_point(field_get:FAgentProto.LogLevel)
  return _internal_loglevel();
}
inline void FAgentProto::_internal_set_loglevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loglevel_ = value;
}
inline void FAgentProto::set_loglevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_loglevel(value);
  // @@protoc_insertion_point(field_set:FAgentProto.LogLevel)
}

// string LoginUser = 18;
inline void FAgentProto::clear_loginuser() {
  loginuser_.ClearToEmpty();
}
inline const std::string& FAgentProto::loginuser() const {
  // @@protoc_insertion_point(field_get:FAgentProto.LoginUser)
  return _internal_loginuser();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_loginuser(ArgT0&& arg0, ArgT... args) {
 
 loginuser_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.LoginUser)
}
inline std::string* FAgentProto::mutable_loginuser() {
  std::string* _s = _internal_mutable_loginuser();
  // @@protoc_insertion_point(field_mutable:FAgentProto.LoginUser)
  return _s;
}
inline const std::string& FAgentProto::_internal_loginuser() const {
  return loginuser_.Get();
}
inline void FAgentProto::_internal_set_loginuser(const std::string& value) {
  
  loginuser_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_loginuser() {
  
  return loginuser_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_loginuser() {
  // @@protoc_insertion_point(field_release:FAgentProto.LoginUser)
  return loginuser_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_loginuser(std::string* loginuser) {
  if (loginuser != nullptr) {
    
  } else {
    
  }
  loginuser_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginuser,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.LoginUser)
}

// int32 AllocationPriority = 19;
inline void FAgentProto::clear_allocationpriority() {
  allocationpriority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_allocationpriority() const {
  return allocationpriority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::allocationpriority() const {
  // @@protoc_insertion_point(field_get:FAgentProto.AllocationPriority)
  return _internal_allocationpriority();
}
inline void FAgentProto::_internal_set_allocationpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  allocationpriority_ = value;
}
inline void FAgentProto::set_allocationpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_allocationpriority(value);
  // @@protoc_insertion_point(field_set:FAgentProto.AllocationPriority)
}

// float TotalMemory = 20;
inline void FAgentProto::clear_totalmemory() {
  totalmemory_ = 0;
}
inline float FAgentProto::_internal_totalmemory() const {
  return totalmemory_;
}
inline float FAgentProto::totalmemory() const {
  // @@protoc_insertion_point(field_get:FAgentProto.TotalMemory)
  return _internal_totalmemory();
}
inline void FAgentProto::_internal_set_totalmemory(float value) {
  
  totalmemory_ = value;
}
inline void FAgentProto::set_totalmemory(float value) {
  _internal_set_totalmemory(value);
  // @@protoc_insertion_point(field_set:FAgentProto.TotalMemory)
}

// float UseMemory = 21;
inline void FAgentProto::clear_usememory() {
  usememory_ = 0;
}
inline float FAgentProto::_internal_usememory() const {
  return usememory_;
}
inline float FAgentProto::usememory() const {
  // @@protoc_insertion_point(field_get:FAgentProto.UseMemory)
  return _internal_usememory();
}
inline void FAgentProto::_internal_set_usememory(float value) {
  
  usememory_ = value;
}
inline void FAgentProto::set_usememory(float value) {
  _internal_set_usememory(value);
  // @@protoc_insertion_point(field_set:FAgentProto.UseMemory)
}

// int32 LogicCore = 22;
inline void FAgentProto::clear_logiccore() {
  logiccore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_logiccore() const {
  return logiccore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::logiccore() const {
  // @@protoc_insertion_point(field_get:FAgentProto.LogicCore)
  return _internal_logiccore();
}
inline void FAgentProto::_internal_set_logiccore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logiccore_ = value;
}
inline void FAgentProto::set_logiccore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logiccore(value);
  // @@protoc_insertion_point(field_set:FAgentProto.LogicCore)
}

// string MacAddress = 23;
inline void FAgentProto::clear_macaddress() {
  macaddress_.ClearToEmpty();
}
inline const std::string& FAgentProto::macaddress() const {
  // @@protoc_insertion_point(field_get:FAgentProto.MacAddress)
  return _internal_macaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_macaddress(ArgT0&& arg0, ArgT... args) {
 
 macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.MacAddress)
}
inline std::string* FAgentProto::mutable_macaddress() {
  std::string* _s = _internal_mutable_macaddress();
  // @@protoc_insertion_point(field_mutable:FAgentProto.MacAddress)
  return _s;
}
inline const std::string& FAgentProto::_internal_macaddress() const {
  return macaddress_.Get();
}
inline void FAgentProto::_internal_set_macaddress(const std::string& value) {
  
  macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_macaddress() {
  
  return macaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_macaddress() {
  // @@protoc_insertion_point(field_release:FAgentProto.MacAddress)
  return macaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_macaddress(std::string* macaddress) {
  if (macaddress != nullptr) {
    
  } else {
    
  }
  macaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaddress,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.MacAddress)
}

// bool bLocalConnection = 24;
inline void FAgentProto::clear_blocalconnection() {
  blocalconnection_ = false;
}
inline bool FAgentProto::_internal_blocalconnection() const {
  return blocalconnection_;
}
inline bool FAgentProto::blocalconnection() const {
  // @@protoc_insertion_point(field_get:FAgentProto.bLocalConnection)
  return _internal_blocalconnection();
}
inline void FAgentProto::_internal_set_blocalconnection(bool value) {
  
  blocalconnection_ = value;
}
inline void FAgentProto::set_blocalconnection(bool value) {
  _internal_set_blocalconnection(value);
  // @@protoc_insertion_point(field_set:FAgentProto.bLocalConnection)
}

// float NetworkSpeed = 25;
inline void FAgentProto::clear_networkspeed() {
  networkspeed_ = 0;
}
inline float FAgentProto::_internal_networkspeed() const {
  return networkspeed_;
}
inline float FAgentProto::networkspeed() const {
  // @@protoc_insertion_point(field_get:FAgentProto.NetworkSpeed)
  return _internal_networkspeed();
}
inline void FAgentProto::_internal_set_networkspeed(float value) {
  
  networkspeed_ = value;
}
inline void FAgentProto::set_networkspeed(float value) {
  _internal_set_networkspeed(value);
  // @@protoc_insertion_point(field_set:FAgentProto.NetworkSpeed)
}

// string OpSystem = 26;
inline void FAgentProto::clear_opsystem() {
  opsystem_.ClearToEmpty();
}
inline const std::string& FAgentProto::opsystem() const {
  // @@protoc_insertion_point(field_get:FAgentProto.OpSystem)
  return _internal_opsystem();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_opsystem(ArgT0&& arg0, ArgT... args) {
 
 opsystem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.OpSystem)
}
inline std::string* FAgentProto::mutable_opsystem() {
  std::string* _s = _internal_mutable_opsystem();
  // @@protoc_insertion_point(field_mutable:FAgentProto.OpSystem)
  return _s;
}
inline const std::string& FAgentProto::_internal_opsystem() const {
  return opsystem_.Get();
}
inline void FAgentProto::_internal_set_opsystem(const std::string& value) {
  
  opsystem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_opsystem() {
  
  return opsystem_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_opsystem() {
  // @@protoc_insertion_point(field_release:FAgentProto.OpSystem)
  return opsystem_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_opsystem(std::string* opsystem) {
  if (opsystem != nullptr) {
    
  } else {
    
  }
  opsystem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opsystem,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.OpSystem)
}

// int32 PhysicalCore = 27;
inline void FAgentProto::clear_physicalcore() {
  physicalcore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_physicalcore() const {
  return physicalcore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::physicalcore() const {
  // @@protoc_insertion_point(field_get:FAgentProto.PhysicalCore)
  return _internal_physicalcore();
}
inline void FAgentProto::_internal_set_physicalcore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  physicalcore_ = value;
}
inline void FAgentProto::set_physicalcore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_physicalcore(value);
  // @@protoc_insertion_point(field_set:FAgentProto.PhysicalCore)
}

// string RouterIp = 28;
inline void FAgentProto::clear_routerip() {
  routerip_.ClearToEmpty();
}
inline const std::string& FAgentProto::routerip() const {
  // @@protoc_insertion_point(field_get:FAgentProto.RouterIp)
  return _internal_routerip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_routerip(ArgT0&& arg0, ArgT... args) {
 
 routerip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.RouterIp)
}
inline std::string* FAgentProto::mutable_routerip() {
  std::string* _s = _internal_mutable_routerip();
  // @@protoc_insertion_point(field_mutable:FAgentProto.RouterIp)
  return _s;
}
inline const std::string& FAgentProto::_internal_routerip() const {
  return routerip_.Get();
}
inline void FAgentProto::_internal_set_routerip(const std::string& value) {
  
  routerip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_routerip() {
  
  return routerip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_routerip() {
  // @@protoc_insertion_point(field_release:FAgentProto.RouterIp)
  return routerip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_routerip(std::string* routerip) {
  if (routerip != nullptr) {
    
  } else {
    
  }
  routerip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routerip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.RouterIp)
}

// bool bUpOrDown = 29;
inline void FAgentProto::clear_bupordown() {
  bupordown_ = false;
}
inline bool FAgentProto::_internal_bupordown() const {
  return bupordown_;
}
inline bool FAgentProto::bupordown() const {
  // @@protoc_insertion_point(field_get:FAgentProto.bUpOrDown)
  return _internal_bupordown();
}
inline void FAgentProto::_internal_set_bupordown(bool value) {
  
  bupordown_ = value;
}
inline void FAgentProto::set_bupordown(bool value) {
  _internal_set_bupordown(value);
  // @@protoc_insertion_point(field_set:FAgentProto.bUpOrDown)
}

// string UpDownTime = 30;
inline void FAgentProto::clear_updowntime() {
  updowntime_.ClearToEmpty();
}
inline const std::string& FAgentProto::updowntime() const {
  // @@protoc_insertion_point(field_get:FAgentProto.UpDownTime)
  return _internal_updowntime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_updowntime(ArgT0&& arg0, ArgT... args) {
 
 updowntime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.UpDownTime)
}
inline std::string* FAgentProto::mutable_updowntime() {
  std::string* _s = _internal_mutable_updowntime();
  // @@protoc_insertion_point(field_mutable:FAgentProto.UpDownTime)
  return _s;
}
inline const std::string& FAgentProto::_internal_updowntime() const {
  return updowntime_.Get();
}
inline void FAgentProto::_internal_set_updowntime(const std::string& value) {
  
  updowntime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_updowntime() {
  
  return updowntime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_updowntime() {
  // @@protoc_insertion_point(field_release:FAgentProto.UpDownTime)
  return updowntime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_updowntime(std::string* updowntime) {
  if (updowntime != nullptr) {
    
  } else {
    
  }
  updowntime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updowntime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.UpDownTime)
}

// bool bEnableInitator = 31;
inline void FAgentProto::clear_benableinitator() {
  benableinitator_ = false;
}
inline bool FAgentProto::_internal_benableinitator() const {
  return benableinitator_;
}
inline bool FAgentProto::benableinitator() const {
  // @@protoc_insertion_point(field_get:FAgentProto.bEnableInitator)
  return _internal_benableinitator();
}
inline void FAgentProto::_internal_set_benableinitator(bool value) {
  
  benableinitator_ = value;
}
inline void FAgentProto::set_benableinitator(bool value) {
  _internal_set_benableinitator(value);
  // @@protoc_insertion_point(field_set:FAgentProto.bEnableInitator)
}

// bool bFixedInitator = 32;
inline void FAgentProto::clear_bfixedinitator() {
  bfixedinitator_ = false;
}
inline bool FAgentProto::_internal_bfixedinitator() const {
  return bfixedinitator_;
}
inline bool FAgentProto::bfixedinitator() const {
  // @@protoc_insertion_point(field_get:FAgentProto.bFixedInitator)
  return _internal_bfixedinitator();
}
inline void FAgentProto::_internal_set_bfixedinitator(bool value) {
  
  bfixedinitator_ = value;
}
inline void FAgentProto::set_bfixedinitator(bool value) {
  _internal_set_bfixedinitator(value);
  // @@protoc_insertion_point(field_set:FAgentProto.bFixedInitator)
}

// bool bEnableHelper = 33;
inline void FAgentProto::clear_benablehelper() {
  benablehelper_ = false;
}
inline bool FAgentProto::_internal_benablehelper() const {
  return benablehelper_;
}
inline bool FAgentProto::benablehelper() const {
  // @@protoc_insertion_point(field_get:FAgentProto.bEnableHelper)
  return _internal_benablehelper();
}
inline void FAgentProto::_internal_set_benablehelper(bool value) {
  
  benablehelper_ = value;
}
inline void FAgentProto::set_benablehelper(bool value) {
  _internal_set_benablehelper(value);
  // @@protoc_insertion_point(field_set:FAgentProto.bEnableHelper)
}

// bool bFixedHelper = 34;
inline void FAgentProto::clear_bfixedhelper() {
  bfixedhelper_ = false;
}
inline bool FAgentProto::_internal_bfixedhelper() const {
  return bfixedhelper_;
}
inline bool FAgentProto::bfixedhelper() const {
  // @@protoc_insertion_point(field_get:FAgentProto.bFixedHelper)
  return _internal_bfixedhelper();
}
inline void FAgentProto::_internal_set_bfixedhelper(bool value) {
  
  bfixedhelper_ = value;
}
inline void FAgentProto::set_bfixedhelper(bool value) {
  _internal_set_bfixedhelper(value);
  // @@protoc_insertion_point(field_set:FAgentProto.bFixedHelper)
}

// string Id = 35;
inline void FAgentProto::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& FAgentProto::id() const {
  // @@protoc_insertion_point(field_get:FAgentProto.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.Id)
}
inline std::string* FAgentProto::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:FAgentProto.Id)
  return _s;
}
inline const std::string& FAgentProto::_internal_id() const {
  return id_.Get();
}
inline void FAgentProto::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_id() {
  // @@protoc_insertion_point(field_release:FAgentProto.Id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.Id)
}

// bool bSubscribe = 36;
inline void FAgentProto::clear_bsubscribe() {
  bsubscribe_ = false;
}
inline bool FAgentProto::_internal_bsubscribe() const {
  return bsubscribe_;
}
inline bool FAgentProto::bsubscribe() const {
  // @@protoc_insertion_point(field_get:FAgentProto.bSubscribe)
  return _internal_bsubscribe();
}
inline void FAgentProto::_internal_set_bsubscribe(bool value) {
  
  bsubscribe_ = value;
}
inline void FAgentProto::set_bsubscribe(bool value) {
  _internal_set_bsubscribe(value);
  // @@protoc_insertion_point(field_set:FAgentProto.bSubscribe)
}

// string message = 37;
inline void FAgentProto::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& FAgentProto::message() const {
  // @@protoc_insertion_point(field_get:FAgentProto.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.message)
}
inline std::string* FAgentProto::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:FAgentProto.message)
  return _s;
}
inline const std::string& FAgentProto::_internal_message() const {
  return message_.Get();
}
inline void FAgentProto::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_message() {
  // @@protoc_insertion_point(field_release:FAgentProto.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.message)
}

// int32 HelperPort = 38;
inline void FAgentProto::clear_helperport() {
  helperport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_helperport() const {
  return helperport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::helperport() const {
  // @@protoc_insertion_point(field_get:FAgentProto.HelperPort)
  return _internal_helperport();
}
inline void FAgentProto::_internal_set_helperport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  helperport_ = value;
}
inline void FAgentProto::set_helperport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_helperport(value);
  // @@protoc_insertion_point(field_set:FAgentProto.HelperPort)
}

// int32 Index = 39;
inline void FAgentProto::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::index() const {
  // @@protoc_insertion_point(field_get:FAgentProto.Index)
  return _internal_index();
}
inline void FAgentProto::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void FAgentProto::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:FAgentProto.Index)
}

// int64 LastUpdate = 40;
inline void FAgentProto::clear_lastupdate() {
  lastupdate_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FAgentProto::_internal_lastupdate() const {
  return lastupdate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FAgentProto::lastupdate() const {
  // @@protoc_insertion_point(field_get:FAgentProto.LastUpdate)
  return _internal_lastupdate();
}
inline void FAgentProto::_internal_set_lastupdate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastupdate_ = value;
}
inline void FAgentProto::set_lastupdate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastupdate(value);
  // @@protoc_insertion_point(field_set:FAgentProto.LastUpdate)
}

// int32 MaxCon = 41;
inline void FAgentProto::clear_maxcon() {
  maxcon_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_maxcon() const {
  return maxcon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::maxcon() const {
  // @@protoc_insertion_point(field_get:FAgentProto.MaxCon)
  return _internal_maxcon();
}
inline void FAgentProto::_internal_set_maxcon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxcon_ = value;
}
inline void FAgentProto::set_maxcon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxcon(value);
  // @@protoc_insertion_point(field_set:FAgentProto.MaxCon)
}

// int32 MaxCpu = 42;
inline void FAgentProto::clear_maxcpu() {
  maxcpu_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_maxcpu() const {
  return maxcpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::maxcpu() const {
  // @@protoc_insertion_point(field_get:FAgentProto.MaxCpu)
  return _internal_maxcpu();
}
inline void FAgentProto::_internal_set_maxcpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxcpu_ = value;
}
inline void FAgentProto::set_maxcpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxcpu(value);
  // @@protoc_insertion_point(field_set:FAgentProto.MaxCpu)
}

// int32 TracePort = 43;
inline void FAgentProto::clear_traceport() {
  traceport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_traceport() const {
  return traceport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::traceport() const {
  // @@protoc_insertion_point(field_get:FAgentProto.TracePort)
  return _internal_traceport();
}
inline void FAgentProto::_internal_set_traceport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  traceport_ = value;
}
inline void FAgentProto::set_traceport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_traceport(value);
  // @@protoc_insertion_point(field_set:FAgentProto.TracePort)
}

// int32 LocalMaxCpu = 44;
inline void FAgentProto::clear_localmaxcpu() {
  localmaxcpu_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::_internal_localmaxcpu() const {
  return localmaxcpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FAgentProto::localmaxcpu() const {
  // @@protoc_insertion_point(field_get:FAgentProto.LocalMaxCpu)
  return _internal_localmaxcpu();
}
inline void FAgentProto::_internal_set_localmaxcpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  localmaxcpu_ = value;
}
inline void FAgentProto::set_localmaxcpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_localmaxcpu(value);
  // @@protoc_insertion_point(field_set:FAgentProto.LocalMaxCpu)
}

// float AvalNet = 45;
inline void FAgentProto::clear_avalnet() {
  avalnet_ = 0;
}
inline float FAgentProto::_internal_avalnet() const {
  return avalnet_;
}
inline float FAgentProto::avalnet() const {
  // @@protoc_insertion_point(field_get:FAgentProto.AvalNet)
  return _internal_avalnet();
}
inline void FAgentProto::_internal_set_avalnet(float value) {
  
  avalnet_ = value;
}
inline void FAgentProto::set_avalnet(float value) {
  _internal_set_avalnet(value);
  // @@protoc_insertion_point(field_set:FAgentProto.AvalNet)
}

// float AvaGpu = 46;
inline void FAgentProto::clear_avagpu() {
  avagpu_ = 0;
}
inline float FAgentProto::_internal_avagpu() const {
  return avagpu_;
}
inline float FAgentProto::avagpu() const {
  // @@protoc_insertion_point(field_get:FAgentProto.AvaGpu)
  return _internal_avagpu();
}
inline void FAgentProto::_internal_set_avagpu(float value) {
  
  avagpu_ = value;
}
inline void FAgentProto::set_avagpu(float value) {
  _internal_set_avagpu(value);
  // @@protoc_insertion_point(field_set:FAgentProto.AvaGpu)
}

// string CpuArch = 47;
inline void FAgentProto::clear_cpuarch() {
  cpuarch_.ClearToEmpty();
}
inline const std::string& FAgentProto::cpuarch() const {
  // @@protoc_insertion_point(field_get:FAgentProto.CpuArch)
  return _internal_cpuarch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_cpuarch(ArgT0&& arg0, ArgT... args) {
 
 cpuarch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.CpuArch)
}
inline std::string* FAgentProto::mutable_cpuarch() {
  std::string* _s = _internal_mutable_cpuarch();
  // @@protoc_insertion_point(field_mutable:FAgentProto.CpuArch)
  return _s;
}
inline const std::string& FAgentProto::_internal_cpuarch() const {
  return cpuarch_.Get();
}
inline void FAgentProto::_internal_set_cpuarch(const std::string& value) {
  
  cpuarch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_cpuarch() {
  
  return cpuarch_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_cpuarch() {
  // @@protoc_insertion_point(field_release:FAgentProto.CpuArch)
  return cpuarch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_cpuarch(std::string* cpuarch) {
  if (cpuarch != nullptr) {
    
  } else {
    
  }
  cpuarch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuarch,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.CpuArch)
}

// string PortMappedAddress = 48;
inline void FAgentProto::clear_portmappedaddress() {
  portmappedaddress_.ClearToEmpty();
}
inline const std::string& FAgentProto::portmappedaddress() const {
  // @@protoc_insertion_point(field_get:FAgentProto.PortMappedAddress)
  return _internal_portmappedaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FAgentProto::set_portmappedaddress(ArgT0&& arg0, ArgT... args) {
 
 portmappedaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FAgentProto.PortMappedAddress)
}
inline std::string* FAgentProto::mutable_portmappedaddress() {
  std::string* _s = _internal_mutable_portmappedaddress();
  // @@protoc_insertion_point(field_mutable:FAgentProto.PortMappedAddress)
  return _s;
}
inline const std::string& FAgentProto::_internal_portmappedaddress() const {
  return portmappedaddress_.Get();
}
inline void FAgentProto::_internal_set_portmappedaddress(const std::string& value) {
  
  portmappedaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FAgentProto::_internal_mutable_portmappedaddress() {
  
  return portmappedaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FAgentProto::release_portmappedaddress() {
  // @@protoc_insertion_point(field_release:FAgentProto.PortMappedAddress)
  return portmappedaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FAgentProto::set_allocated_portmappedaddress(std::string* portmappedaddress) {
  if (portmappedaddress != nullptr) {
    
  } else {
    
  }
  portmappedaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), portmappedaddress,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:FAgentProto.PortMappedAddress)
}

// -------------------------------------------------------------------

// FAgentArrayProto

// repeated .FAgentProto Agents = 1;
inline int FAgentArrayProto::_internal_agents_size() const {
  return agents_.size();
}
inline int FAgentArrayProto::agents_size() const {
  return _internal_agents_size();
}
inline void FAgentArrayProto::clear_agents() {
  agents_.Clear();
}
inline ::FAgentProto* FAgentArrayProto::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:FAgentArrayProto.Agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FAgentProto >*
FAgentArrayProto::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:FAgentArrayProto.Agents)
  return &agents_;
}
inline const ::FAgentProto& FAgentArrayProto::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::FAgentProto& FAgentArrayProto::agents(int index) const {
  // @@protoc_insertion_point(field_get:FAgentArrayProto.Agents)
  return _internal_agents(index);
}
inline ::FAgentProto* FAgentArrayProto::_internal_add_agents() {
  return agents_.Add();
}
inline ::FAgentProto* FAgentArrayProto::add_agents() {
  ::FAgentProto* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:FAgentArrayProto.Agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FAgentProto >&
FAgentArrayProto::agents() const {
  // @@protoc_insertion_point(field_list:FAgentArrayProto.Agents)
  return agents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_agent_2eproto
