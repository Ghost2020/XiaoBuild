// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xiao_msg.proto

#include "xiao_msg.pb.h"

#if defined(PLATFORM_WINDOWS)
#pragma warning(disable : 4125 4800)
#endif

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr FRemoteTaskDesc::FRemoteTaskDesc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workingdir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , priority_(0)
  , coreindex_(0){}
struct FRemoteTaskDescDefaultTypeInternal {
  constexpr FRemoteTaskDescDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FRemoteTaskDescDefaultTypeInternal() {}
  union {
    FRemoteTaskDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FRemoteTaskDescDefaultTypeInternal _FRemoteTaskDesc_default_instance_;
constexpr FCoreStatus::FCoreStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0)
  , status_(false)
  , lastactivetime_(0){}
struct FCoreStatusDefaultTypeInternal {
  constexpr FCoreStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FCoreStatusDefaultTypeInternal() {}
  union {
    FCoreStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FCoreStatusDefaultTypeInternal _FCoreStatus_default_instance_;
constexpr FAgentStatCore::FAgentStatCore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cores_()
  , cpuava_(0)
  , hardava_(0){}
struct FAgentStatCoreDefaultTypeInternal {
  constexpr FAgentStatCoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FAgentStatCoreDefaultTypeInternal() {}
  union {
    FAgentStatCore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FAgentStatCoreDefaultTypeInternal _FAgentStatCore_default_instance_;
constexpr FXiaoMsg::FXiaoMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , taskdesc_(nullptr)
  , stats_(nullptr)
  , type_(0)

  , becho_(false){}
struct FXiaoMsgDefaultTypeInternal {
  constexpr FXiaoMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FXiaoMsgDefaultTypeInternal() {}
  union {
    FXiaoMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FXiaoMsgDefaultTypeInternal _FXiaoMsg_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_xiao_5fmsg_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_xiao_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_xiao_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_xiao_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FRemoteTaskDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FRemoteTaskDesc, guid_),
  PROTOBUF_FIELD_OFFSET(::FRemoteTaskDesc, proc_),
  PROTOBUF_FIELD_OFFSET(::FRemoteTaskDesc, params_),
  PROTOBUF_FIELD_OFFSET(::FRemoteTaskDesc, workingdir_),
  PROTOBUF_FIELD_OFFSET(::FRemoteTaskDesc, priority_),
  PROTOBUF_FIELD_OFFSET(::FRemoteTaskDesc, coreindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FCoreStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FCoreStatus, index_),
  PROTOBUF_FIELD_OFFSET(::FCoreStatus, status_),
  PROTOBUF_FIELD_OFFSET(::FCoreStatus, lastactivetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FAgentStatCore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FAgentStatCore, cpuava_),
  PROTOBUF_FIELD_OFFSET(::FAgentStatCore, hardava_),
  PROTOBUF_FIELD_OFFSET(::FAgentStatCore, cores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FXiaoMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FXiaoMsg, type_),
  PROTOBUF_FIELD_OFFSET(::FXiaoMsg, id_),
  PROTOBUF_FIELD_OFFSET(::FXiaoMsg, becho_),
  PROTOBUF_FIELD_OFFSET(::FXiaoMsg, taskdesc_),
  PROTOBUF_FIELD_OFFSET(::FXiaoMsg, msg_),
  PROTOBUF_FIELD_OFFSET(::FXiaoMsg, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FRemoteTaskDesc)},
  { 12, -1, -1, sizeof(::FCoreStatus)},
  { 21, -1, -1, sizeof(::FAgentStatCore)},
  { 30, -1, -1, sizeof(::FXiaoMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FRemoteTaskDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FCoreStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FAgentStatCore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FXiaoMsg_default_instance_),
};

const char descriptor_table_protodef_xiao_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016xiao_msg.proto\"v\n\017FRemoteTaskDesc\022\014\n\004G"
  "UID\030\001 \001(\t\022\014\n\004Proc\030\002 \001(\t\022\016\n\006Params\030\003 \001(\t\022"
  "\022\n\nWorkingDir\030\004 \001(\t\022\020\n\010Priority\030\005 \001(\005\022\021\n"
  "\tCoreIndex\030\006 \001(\005\"D\n\013FCoreStatus\022\r\n\005Index"
  "\030\001 \001(\005\022\016\n\006Status\030\002 \001(\010\022\026\n\016LastActiveTime"
  "\030\003 \001(\002\"N\n\016FAgentStatCore\022\016\n\006CpuAva\030\001 \001(\002"
  "\022\017\n\007HardAva\030\002 \001(\002\022\033\n\005Cores\030\003 \003(\0132\014.FCore"
  "Status\"\223\001\n\010FXiaoMsg\022\033\n\004Type\030\001 \001(\0162\r.EXia"
  "oMsgType\022\n\n\002Id\030\002 \001(\t\022\r\n\005bEcho\030\003 \001(\010\022\"\n\010T"
  "askDesc\030\004 \001(\0132\020.FRemoteTaskDesc\022\013\n\003Msg\030\005"
  " \001(\t\022\036\n\005Stats\030\006 \001(\0132\017.FAgentStatCore*\324\003\n"
  "\014EXiaoMsgType\022\021\n\rXmt_Undefined\020\000\022\021\n\rXmt_"
  "KeepAlive\020\001\022\020\n\014Xmt_Accepted\020\002\022\020\n\014Xmt_Dec"
  "lined\020\003\022\022\n\016Xmt_TryConnect\020\004\022\020\n\014Xmt_TaskD"
  "esc\020\005\022\020\n\014Xmt_TaskKill\020\006\022\022\n\016Xmt_Disconnec"
  "t\020\007\022\014\n\010Xmt_Data\020\010\022\032\n\026Xmt_EchoAcceptFullD"
  "ata\020\t\022\034\n\030Xmt_EchoAcceptBrokenData\020\n\022\022\n\016X"
  "mt_ReSendData\020\013\022\032\n\026Xmt_AgentAcceptConnec"
  "t\020\014\022\034\n\030Xmt_AgentDeclinedConnect\020\r\022\021\n\rXmt"
  "_AgentStat\020\016\022\024\n\020Xmt_AgentRunTask\020\017\022\026\n\022Xm"
  "t_AgentOutputLog\020\020\022\023\n\017Xmt_AgentOutput\020\021\022"
  "\023\n\017Xmt_AgentFailed\020\022\022\024\n\020Xmt_AgentRestart"
  "\020\023\022\027\n\023Xmt_AgentDisconnect\020\024*2\n\rEXiaoData"
  "Type\022\021\n\rXdt_UnDefined\020\000\022\016\n\nXdt_Binary\020\001b"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_xiao_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xiao_5fmsg_2eproto = {
  false, false, 967, descriptor_table_protodef_xiao_5fmsg_2eproto, "xiao_msg.proto", 
  &descriptor_table_xiao_5fmsg_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_xiao_5fmsg_2eproto::offsets,
  file_level_metadata_xiao_5fmsg_2eproto, file_level_enum_descriptors_xiao_5fmsg_2eproto, file_level_service_descriptors_xiao_5fmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_xiao_5fmsg_2eproto_getter() {
  return &descriptor_table_xiao_5fmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_xiao_5fmsg_2eproto(&descriptor_table_xiao_5fmsg_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EXiaoMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xiao_5fmsg_2eproto);
  return file_level_enum_descriptors_xiao_5fmsg_2eproto[0];
}
bool EXiaoMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EXiaoDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_xiao_5fmsg_2eproto);
  return file_level_enum_descriptors_xiao_5fmsg_2eproto[1];
}
bool EXiaoDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FRemoteTaskDesc::_Internal {
 public:
};

FRemoteTaskDesc::FRemoteTaskDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FRemoteTaskDesc)
}
FRemoteTaskDesc::FRemoteTaskDesc(const FRemoteTaskDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guid().empty()) {
    guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid(), 
      GetArenaForAllocation());
  }
  proc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proc().empty()) {
    proc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proc(), 
      GetArenaForAllocation());
  }
  params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_params().empty()) {
    params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_params(), 
      GetArenaForAllocation());
  }
  workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workingdir().empty()) {
    workingdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workingdir(), 
      GetArenaForAllocation());
  }
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&coreindex_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(coreindex_));
  // @@protoc_insertion_point(copy_constructor:FRemoteTaskDesc)
}

void FRemoteTaskDesc::SharedCtor() {
guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
proc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&priority_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coreindex_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(coreindex_));
}

FRemoteTaskDesc::~FRemoteTaskDesc() {
  // @@protoc_insertion_point(destructor:FRemoteTaskDesc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FRemoteTaskDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workingdir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FRemoteTaskDesc::ArenaDtor(void* object) {
  FRemoteTaskDesc* _this = reinterpret_cast< FRemoteTaskDesc* >(object);
  (void)_this;
}
void FRemoteTaskDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FRemoteTaskDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FRemoteTaskDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:FRemoteTaskDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guid_.ClearToEmpty();
  proc_.ClearToEmpty();
  params_.ClearToEmpty();
  workingdir_.ClearToEmpty();
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coreindex_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(coreindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FRemoteTaskDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string GUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FRemoteTaskDesc.GUID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Proc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FRemoteTaskDesc.Proc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FRemoteTaskDesc.Params"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string WorkingDir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_workingdir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FRemoteTaskDesc.WorkingDir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CoreIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          coreindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FRemoteTaskDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FRemoteTaskDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GUID = 1;
  if (!this->_internal_guid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FRemoteTaskDesc.GUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  // string Proc = 2;
  if (!this->_internal_proc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proc().data(), static_cast<int>(this->_internal_proc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FRemoteTaskDesc.Proc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proc(), target);
  }

  // string Params = 3;
  if (!this->_internal_params().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_params().data(), static_cast<int>(this->_internal_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FRemoteTaskDesc.Params");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_params(), target);
  }

  // string WorkingDir = 4;
  if (!this->_internal_workingdir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workingdir().data(), static_cast<int>(this->_internal_workingdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FRemoteTaskDesc.WorkingDir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_workingdir(), target);
  }

  // int32 Priority = 5;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_priority(), target);
  }

  // int32 CoreIndex = 6;
  if (this->_internal_coreindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_coreindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FRemoteTaskDesc)
  return target;
}

size_t FRemoteTaskDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FRemoteTaskDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string GUID = 1;
  if (!this->_internal_guid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  // string Proc = 2;
  if (!this->_internal_proc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proc());
  }

  // string Params = 3;
  if (!this->_internal_params().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_params());
  }

  // string WorkingDir = 4;
  if (!this->_internal_workingdir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workingdir());
  }

  // int32 Priority = 5;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  // int32 CoreIndex = 6;
  if (this->_internal_coreindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_coreindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FRemoteTaskDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FRemoteTaskDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FRemoteTaskDesc::GetClassData() const { return &_class_data_; }

void FRemoteTaskDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FRemoteTaskDesc *>(to)->MergeFrom(
      static_cast<const FRemoteTaskDesc &>(from));
}


void FRemoteTaskDesc::MergeFrom(const FRemoteTaskDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FRemoteTaskDesc)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guid().empty()) {
    _internal_set_guid(from._internal_guid());
  }
  if (!from._internal_proc().empty()) {
    _internal_set_proc(from._internal_proc());
  }
  if (!from._internal_params().empty()) {
    _internal_set_params(from._internal_params());
  }
  if (!from._internal_workingdir().empty()) {
    _internal_set_workingdir(from._internal_workingdir());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from._internal_coreindex() != 0) {
    _internal_set_coreindex(from._internal_coreindex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FRemoteTaskDesc::CopyFrom(const FRemoteTaskDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FRemoteTaskDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FRemoteTaskDesc::IsInitialized() const {
  return true;
}

void FRemoteTaskDesc::InternalSwap(FRemoteTaskDesc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_, lhs_arena,
      &other->guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proc_, lhs_arena,
      &other->proc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &params_, lhs_arena,
      &other->params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workingdir_, lhs_arena,
      &other->workingdir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FRemoteTaskDesc, coreindex_)
      + sizeof(FRemoteTaskDesc::coreindex_)
      - PROTOBUF_FIELD_OFFSET(FRemoteTaskDesc, priority_)>(
          reinterpret_cast<char*>(&priority_),
          reinterpret_cast<char*>(&other->priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FRemoteTaskDesc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_xiao_5fmsg_2eproto_getter, &descriptor_table_xiao_5fmsg_2eproto_once,
      file_level_metadata_xiao_5fmsg_2eproto[0]);
}

// ===================================================================

class FCoreStatus::_Internal {
 public:
};

FCoreStatus::FCoreStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FCoreStatus)
}
FCoreStatus::FCoreStatus(const FCoreStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastactivetime_) -
    reinterpret_cast<char*>(&index_)) + sizeof(lastactivetime_));
  // @@protoc_insertion_point(copy_constructor:FCoreStatus)
}

void FCoreStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lastactivetime_) -
    reinterpret_cast<char*>(&index_)) + sizeof(lastactivetime_));
}

FCoreStatus::~FCoreStatus() {
  // @@protoc_insertion_point(destructor:FCoreStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FCoreStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FCoreStatus::ArenaDtor(void* object) {
  FCoreStatus* _this = reinterpret_cast< FCoreStatus* >(object);
  (void)_this;
}
void FCoreStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FCoreStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FCoreStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:FCoreStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastactivetime_) -
      reinterpret_cast<char*>(&index_)) + sizeof(lastactivetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FCoreStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float LastActiveTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lastactivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FCoreStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FCoreStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // bool Status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  // float LastActiveTime = 3;
  if (!(this->_internal_lastactivetime() <= 0 && this->_internal_lastactivetime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lastactivetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FCoreStatus)
  return target;
}

size_t FCoreStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FCoreStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // bool Status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  // float LastActiveTime = 3;
  if (!(this->_internal_lastactivetime() <= 0 && this->_internal_lastactivetime() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FCoreStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FCoreStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FCoreStatus::GetClassData() const { return &_class_data_; }

void FCoreStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FCoreStatus *>(to)->MergeFrom(
      static_cast<const FCoreStatus &>(from));
}


void FCoreStatus::MergeFrom(const FCoreStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FCoreStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from._internal_lastactivetime() <= 0 && from._internal_lastactivetime() >= 0)) {
    _internal_set_lastactivetime(from._internal_lastactivetime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FCoreStatus::CopyFrom(const FCoreStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FCoreStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCoreStatus::IsInitialized() const {
  return true;
}

void FCoreStatus::InternalSwap(FCoreStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FCoreStatus, lastactivetime_)
      + sizeof(FCoreStatus::lastactivetime_)
      - PROTOBUF_FIELD_OFFSET(FCoreStatus, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FCoreStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_xiao_5fmsg_2eproto_getter, &descriptor_table_xiao_5fmsg_2eproto_once,
      file_level_metadata_xiao_5fmsg_2eproto[1]);
}

// ===================================================================

class FAgentStatCore::_Internal {
 public:
};

FAgentStatCore::FAgentStatCore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cores_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FAgentStatCore)
}
FAgentStatCore::FAgentStatCore(const FAgentStatCore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cores_(from.cores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cpuava_, &from.cpuava_,
    static_cast<size_t>(reinterpret_cast<char*>(&hardava_) -
    reinterpret_cast<char*>(&cpuava_)) + sizeof(hardava_));
  // @@protoc_insertion_point(copy_constructor:FAgentStatCore)
}

void FAgentStatCore::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpuava_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hardava_) -
    reinterpret_cast<char*>(&cpuava_)) + sizeof(hardava_));
}

FAgentStatCore::~FAgentStatCore() {
  // @@protoc_insertion_point(destructor:FAgentStatCore)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FAgentStatCore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FAgentStatCore::ArenaDtor(void* object) {
  FAgentStatCore* _this = reinterpret_cast< FAgentStatCore* >(object);
  (void)_this;
}
void FAgentStatCore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FAgentStatCore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FAgentStatCore::Clear() {
// @@protoc_insertion_point(message_clear_start:FAgentStatCore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cores_.Clear();
  ::memset(&cpuava_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hardava_) -
      reinterpret_cast<char*>(&cpuava_)) + sizeof(hardava_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FAgentStatCore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float CpuAva = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          cpuava_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HardAva = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          hardava_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .FCoreStatus Cores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FAgentStatCore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FAgentStatCore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float CpuAva = 1;
  if (!(this->_internal_cpuava() <= 0 && this->_internal_cpuava() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_cpuava(), target);
  }

  // float HardAva = 2;
  if (!(this->_internal_hardava() <= 0 && this->_internal_hardava() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_hardava(), target);
  }

  // repeated .FCoreStatus Cores = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cores_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cores(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FAgentStatCore)
  return target;
}

size_t FAgentStatCore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FAgentStatCore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FCoreStatus Cores = 3;
  total_size += 1UL * this->_internal_cores_size();
  for (const auto& msg : this->cores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float CpuAva = 1;
  if (!(this->_internal_cpuava() <= 0 && this->_internal_cpuava() >= 0)) {
    total_size += 1 + 4;
  }

  // float HardAva = 2;
  if (!(this->_internal_hardava() <= 0 && this->_internal_hardava() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FAgentStatCore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FAgentStatCore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FAgentStatCore::GetClassData() const { return &_class_data_; }

void FAgentStatCore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FAgentStatCore *>(to)->MergeFrom(
      static_cast<const FAgentStatCore &>(from));
}


void FAgentStatCore::MergeFrom(const FAgentStatCore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FAgentStatCore)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cores_.MergeFrom(from.cores_);
  if (!(from._internal_cpuava() <= 0 && from._internal_cpuava() >= 0)) {
    _internal_set_cpuava(from._internal_cpuava());
  }
  if (!(from._internal_hardava() <= 0 && from._internal_hardava() >= 0)) {
    _internal_set_hardava(from._internal_hardava());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FAgentStatCore::CopyFrom(const FAgentStatCore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FAgentStatCore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FAgentStatCore::IsInitialized() const {
  return true;
}

void FAgentStatCore::InternalSwap(FAgentStatCore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cores_.InternalSwap(&other->cores_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FAgentStatCore, hardava_)
      + sizeof(FAgentStatCore::hardava_)
      - PROTOBUF_FIELD_OFFSET(FAgentStatCore, cpuava_)>(
          reinterpret_cast<char*>(&cpuava_),
          reinterpret_cast<char*>(&other->cpuava_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FAgentStatCore::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_xiao_5fmsg_2eproto_getter, &descriptor_table_xiao_5fmsg_2eproto_once,
      file_level_metadata_xiao_5fmsg_2eproto[2]);
}

// ===================================================================

class FXiaoMsg::_Internal {
 public:
  static const ::FRemoteTaskDesc& taskdesc(const FXiaoMsg* msg);
  static const ::FAgentStatCore& stats(const FXiaoMsg* msg);
};

const ::FRemoteTaskDesc&
FXiaoMsg::_Internal::taskdesc(const FXiaoMsg* msg) {
  return *msg->taskdesc_;
}
const ::FAgentStatCore&
FXiaoMsg::_Internal::stats(const FXiaoMsg* msg) {
  return *msg->stats_;
}
FXiaoMsg::FXiaoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FXiaoMsg)
}
FXiaoMsg::FXiaoMsg(const FXiaoMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_taskdesc()) {
    taskdesc_ = new ::FRemoteTaskDesc(*from.taskdesc_);
  } else {
    taskdesc_ = nullptr;
  }
  if (from._internal_has_stats()) {
    stats_ = new ::FAgentStatCore(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&becho_) -
    reinterpret_cast<char*>(&type_)) + sizeof(becho_));
  // @@protoc_insertion_point(copy_constructor:FXiaoMsg)
}

void FXiaoMsg::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&taskdesc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&becho_) -
    reinterpret_cast<char*>(&taskdesc_)) + sizeof(becho_));
}

FXiaoMsg::~FXiaoMsg() {
  // @@protoc_insertion_point(destructor:FXiaoMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FXiaoMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete taskdesc_;
  if (this != internal_default_instance()) delete stats_;
}

void FXiaoMsg::ArenaDtor(void* object) {
  FXiaoMsg* _this = reinterpret_cast< FXiaoMsg* >(object);
  (void)_this;
}
void FXiaoMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FXiaoMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FXiaoMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FXiaoMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && taskdesc_ != nullptr) {
    delete taskdesc_;
  }
  taskdesc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&becho_) -
      reinterpret_cast<char*>(&type_)) + sizeof(becho_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FXiaoMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .EXiaoMsgType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::EXiaoMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // string Id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FXiaoMsg.Id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bEcho = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          becho_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FRemoteTaskDesc TaskDesc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskdesc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FXiaoMsg.Msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FAgentStatCore Stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FXiaoMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FXiaoMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .EXiaoMsgType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string Id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FXiaoMsg.Id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // bool bEcho = 3;
  if (this->_internal_becho() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_becho(), target);
  }

  // .FRemoteTaskDesc TaskDesc = 4;
  if (this->_internal_has_taskdesc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::taskdesc(this), target, stream);
  }

  // string Msg = 5;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FXiaoMsg.Msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg(), target);
  }

  // .FAgentStatCore Stats = 6;
  if (this->_internal_has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FXiaoMsg)
  return target;
}

size_t FXiaoMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FXiaoMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Msg = 5;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .FRemoteTaskDesc TaskDesc = 4;
  if (this->_internal_has_taskdesc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taskdesc_);
  }

  // .FAgentStatCore Stats = 6;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // .EXiaoMsgType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool bEcho = 3;
  if (this->_internal_becho() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FXiaoMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FXiaoMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FXiaoMsg::GetClassData() const { return &_class_data_; }

void FXiaoMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FXiaoMsg *>(to)->MergeFrom(
      static_cast<const FXiaoMsg &>(from));
}


void FXiaoMsg::MergeFrom(const FXiaoMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FXiaoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_taskdesc()) {
    _internal_mutable_taskdesc()->::FRemoteTaskDesc::MergeFrom(from._internal_taskdesc());
  }
  if (from._internal_has_stats()) {
    _internal_mutable_stats()->::FAgentStatCore::MergeFrom(from._internal_stats());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_becho() != 0) {
    _internal_set_becho(from._internal_becho());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FXiaoMsg::CopyFrom(const FXiaoMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FXiaoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FXiaoMsg::IsInitialized() const {
  return true;
}

void FXiaoMsg::InternalSwap(FXiaoMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FXiaoMsg, becho_)
      + sizeof(FXiaoMsg::becho_)
      - PROTOBUF_FIELD_OFFSET(FXiaoMsg, taskdesc_)>(
          reinterpret_cast<char*>(&taskdesc_),
          reinterpret_cast<char*>(&other->taskdesc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FXiaoMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_xiao_5fmsg_2eproto_getter, &descriptor_table_xiao_5fmsg_2eproto_once,
      file_level_metadata_xiao_5fmsg_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FRemoteTaskDesc* Arena::CreateMaybeMessage< ::FRemoteTaskDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FRemoteTaskDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::FCoreStatus* Arena::CreateMaybeMessage< ::FCoreStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FCoreStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::FAgentStatCore* Arena::CreateMaybeMessage< ::FAgentStatCore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FAgentStatCore >(arena);
}
template<> PROTOBUF_NOINLINE ::FXiaoMsg* Arena::CreateMaybeMessage< ::FXiaoMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FXiaoMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
