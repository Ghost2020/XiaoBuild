// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto

#include "agent.pb.h"

#if defined(PLATFORM_WINDOWS)
#pragma warning(disable : 4125 4800)
#endif

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr FAgentProto::FAgentProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lastcon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpuinfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loginuser_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , macaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , opsystem_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , routerip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updowntime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpuarch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , portmappedaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
  , type_(0)
  , cpuava_(0)
  , totalhelpcache_(0)
  , usehelpcache_(0)
  , helpercore_(0)
  , buildpriority_(0)
  , totalhardspace_(0)
  , usehardspace_(0)
  , loglevel_(0)
  , allocationpriority_(0)
  , totalmemory_(0)
  , usememory_(0)
  , logiccore_(0)
  , bbuildcache_(false)
  , blocalconnection_(false)
  , bupordown_(false)
  , benableinitator_(false)
  , networkspeed_(0)
  , physicalcore_(0)
  , bfixedinitator_(false)
  , benablehelper_(false)
  , bfixedhelper_(false)
  , bsubscribe_(false)
  , helperport_(0)
  , index_(0)
  , lastupdate_(int64_t{0})
  , maxcon_(0)
  , maxcpu_(0)
  , traceport_(0)
  , localmaxcpu_(0)
  , avalnet_(0)
  , avagpu_(0){}
struct FAgentProtoDefaultTypeInternal {
  constexpr FAgentProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FAgentProtoDefaultTypeInternal() {}
  union {
    FAgentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FAgentProtoDefaultTypeInternal _FAgentProto_default_instance_;
constexpr FAgentArrayProto::FAgentArrayProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agents_(){}
struct FAgentArrayProtoDefaultTypeInternal {
  constexpr FAgentArrayProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FAgentArrayProtoDefaultTypeInternal() {}
  union {
    FAgentArrayProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FAgentArrayProtoDefaultTypeInternal _FAgentArrayProto_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_agent_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_agent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_agent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_agent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FAgentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FAgentProto, status_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, username_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, type_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, desc_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, group_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, cpuava_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, lastcon_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, totalhelpcache_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, usehelpcache_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, helpercore_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, bbuildcache_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, buildpriority_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, cpuinfo_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, totalhardspace_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, usehardspace_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, ip_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, loglevel_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, loginuser_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, allocationpriority_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, totalmemory_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, usememory_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, logiccore_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, macaddress_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, blocalconnection_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, networkspeed_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, opsystem_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, physicalcore_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, routerip_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, bupordown_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, updowntime_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, benableinitator_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, bfixedinitator_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, benablehelper_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, bfixedhelper_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, id_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, bsubscribe_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, message_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, helperport_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, index_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, lastupdate_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, maxcon_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, maxcpu_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, traceport_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, localmaxcpu_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, avalnet_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, avagpu_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, cpuarch_),
  PROTOBUF_FIELD_OFFSET(::FAgentProto, portmappedaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FAgentArrayProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FAgentArrayProto, agents_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FAgentProto)},
  { 54, -1, -1, sizeof(::FAgentArrayProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FAgentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FAgentArrayProto_default_instance_),
};

const char descriptor_table_protodef_agent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013agent.proto\"\260\007\n\013FAgentProto\022\016\n\006Status\030"
  "\001 \001(\005\022\020\n\010Username\030\002 \001(\t\022\014\n\004Type\030\003 \001(\005\022\014\n"
  "\004Desc\030\004 \001(\t\022\r\n\005Group\030\005 \001(\t\022\016\n\006CpuAva\030\006 \001"
  "(\002\022\017\n\007LastCon\030\007 \001(\t\022\026\n\016TotalHelpCache\030\010 "
  "\001(\002\022\024\n\014UseHelpCache\030\t \001(\002\022\022\n\nHelperCore\030"
  "\n \001(\005\022\023\n\013bBuildCache\030\013 \001(\010\022\025\n\rBuildPrior"
  "ity\030\014 \001(\005\022\017\n\007CpuInfo\030\r \001(\t\022\026\n\016TotalHardS"
  "pace\030\016 \001(\002\022\024\n\014UseHardSpace\030\017 \001(\002\022\n\n\002Ip\030\020"
  " \001(\t\022\020\n\010LogLevel\030\021 \001(\005\022\021\n\tLoginUser\030\022 \001("
  "\t\022\032\n\022AllocationPriority\030\023 \001(\005\022\023\n\013TotalMe"
  "mory\030\024 \001(\002\022\021\n\tUseMemory\030\025 \001(\002\022\021\n\tLogicCo"
  "re\030\026 \001(\005\022\022\n\nMacAddress\030\027 \001(\t\022\030\n\020bLocalCo"
  "nnection\030\030 \001(\010\022\024\n\014NetworkSpeed\030\031 \001(\002\022\020\n\010"
  "OpSystem\030\032 \001(\t\022\024\n\014PhysicalCore\030\033 \001(\005\022\020\n\010"
  "RouterIp\030\034 \001(\t\022\021\n\tbUpOrDown\030\035 \001(\010\022\022\n\nUpD"
  "ownTime\030\036 \001(\t\022\027\n\017bEnableInitator\030\037 \001(\010\022\026"
  "\n\016bFixedInitator\030  \001(\010\022\025\n\rbEnableHelper\030"
  "! \001(\010\022\024\n\014bFixedHelper\030\" \001(\010\022\n\n\002Id\030# \001(\t\022"
  "\022\n\nbSubscribe\030$ \001(\010\022\017\n\007message\030% \001(\t\022\022\n\n"
  "HelperPort\030& \001(\005\022\r\n\005Index\030\' \001(\005\022\022\n\nLastU"
  "pdate\030( \001(\003\022\016\n\006MaxCon\030) \001(\005\022\016\n\006MaxCpu\030* "
  "\001(\005\022\021\n\tTracePort\030+ \001(\005\022\023\n\013LocalMaxCpu\030, "
  "\001(\005\022\017\n\007AvalNet\030- \001(\002\022\016\n\006AvaGpu\030. \001(\002\022\017\n\007"
  "CpuArch\030/ \001(\t\022\031\n\021PortMappedAddress\0300 \001(\t"
  "\"0\n\020FAgentArrayProto\022\034\n\006Agents\030\001 \003(\0132\014.F"
  "AgentProtob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_agent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agent_2eproto = {
  false, false, 1018, descriptor_table_protodef_agent_2eproto, "agent.proto", 
  &descriptor_table_agent_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_agent_2eproto::offsets,
  file_level_metadata_agent_2eproto, file_level_enum_descriptors_agent_2eproto, file_level_service_descriptors_agent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_agent_2eproto_getter() {
  return &descriptor_table_agent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_agent_2eproto(&descriptor_table_agent_2eproto);

// ===================================================================

class FAgentProto::_Internal {
 public:
};

FAgentProto::FAgentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FAgentProto)
}
FAgentProto::FAgentProto(const FAgentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group().empty()) {
    group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group(), 
      GetArenaForAllocation());
  }
  lastcon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lastcon().empty()) {
    lastcon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lastcon(), 
      GetArenaForAllocation());
  }
  cpuinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpuinfo().empty()) {
    cpuinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpuinfo(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  loginuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loginuser().empty()) {
    loginuser_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loginuser(), 
      GetArenaForAllocation());
  }
  macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_macaddress().empty()) {
    macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_macaddress(), 
      GetArenaForAllocation());
  }
  opsystem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opsystem().empty()) {
    opsystem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opsystem(), 
      GetArenaForAllocation());
  }
  routerip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_routerip().empty()) {
    routerip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_routerip(), 
      GetArenaForAllocation());
  }
  updowntime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updowntime().empty()) {
    updowntime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updowntime(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  cpuarch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpuarch().empty()) {
    cpuarch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpuarch(), 
      GetArenaForAllocation());
  }
  portmappedaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_portmappedaddress().empty()) {
    portmappedaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_portmappedaddress(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&avagpu_) -
    reinterpret_cast<char*>(&status_)) + sizeof(avagpu_));
  // @@protoc_insertion_point(copy_constructor:FAgentProto)
}

void FAgentProto::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lastcon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cpuinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
loginuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
opsystem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
routerip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
updowntime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cpuarch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
portmappedaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&avagpu_) -
    reinterpret_cast<char*>(&status_)) + sizeof(avagpu_));
}

FAgentProto::~FAgentProto() {
  // @@protoc_insertion_point(destructor:FAgentProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FAgentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastcon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpuinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loginuser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  macaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opsystem_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  routerip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updowntime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpuarch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  portmappedaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FAgentProto::ArenaDtor(void* object) {
  FAgentProto* _this = reinterpret_cast< FAgentProto* >(object);
  (void)_this;
}
void FAgentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FAgentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FAgentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:FAgentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  desc_.ClearToEmpty();
  group_.ClearToEmpty();
  lastcon_.ClearToEmpty();
  cpuinfo_.ClearToEmpty();
  ip_.ClearToEmpty();
  loginuser_.ClearToEmpty();
  macaddress_.ClearToEmpty();
  opsystem_.ClearToEmpty();
  routerip_.ClearToEmpty();
  updowntime_.ClearToEmpty();
  id_.ClearToEmpty();
  message_.ClearToEmpty();
  cpuarch_.ClearToEmpty();
  portmappedaddress_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avagpu_) -
      reinterpret_cast<char*>(&status_)) + sizeof(avagpu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FAgentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.Username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.Desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Group = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.Group"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float CpuAva = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          cpuava_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string LastCon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_lastcon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.LastCon"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float TotalHelpCache = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          totalhelpcache_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float UseHelpCache = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          usehelpcache_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 HelperCore = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          helpercore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bBuildCache = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          bbuildcache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BuildPriority = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          buildpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string CpuInfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_cpuinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.CpuInfo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float TotalHardSpace = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          totalhardspace_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float UseHardSpace = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          usehardspace_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string Ip = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.Ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LogLevel = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          loglevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LoginUser = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_loginuser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.LoginUser"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AllocationPriority = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          allocationpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float TotalMemory = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          totalmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float UseMemory = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          usememory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 LogicCore = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          logiccore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MacAddress = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_macaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.MacAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bLocalConnection = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          blocalconnection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float NetworkSpeed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          networkspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string OpSystem = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_opsystem();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.OpSystem"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PhysicalCore = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          physicalcore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string RouterIp = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_routerip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.RouterIp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bUpOrDown = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          bupordown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UpDownTime = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_updowntime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.UpDownTime"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bEnableInitator = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          benableinitator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bFixedInitator = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          bfixedinitator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bEnableHelper = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          benablehelper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bFixedHelper = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bfixedhelper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.Id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bSubscribe = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bsubscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HelperPort = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          helperport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Index = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastUpdate = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lastupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxCon = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          maxcon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxCpu = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          maxcpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TracePort = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          traceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LocalMaxCpu = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          localmaxcpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float AvalNet = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          avalnet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float AvaGpu = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          avagpu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string CpuArch = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_cpuarch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.CpuArch"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PortMappedAddress = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_portmappedaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FAgentProto.PortMappedAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FAgentProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FAgentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string Username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.Username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // int32 Type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // string Desc = 4;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.Desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // string Group = 5;
  if (!this->_internal_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.Group");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_group(), target);
  }

  // float CpuAva = 6;
  if (!(this->_internal_cpuava() <= 0 && this->_internal_cpuava() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_cpuava(), target);
  }

  // string LastCon = 7;
  if (!this->_internal_lastcon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastcon().data(), static_cast<int>(this->_internal_lastcon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.LastCon");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_lastcon(), target);
  }

  // float TotalHelpCache = 8;
  if (!(this->_internal_totalhelpcache() <= 0 && this->_internal_totalhelpcache() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_totalhelpcache(), target);
  }

  // float UseHelpCache = 9;
  if (!(this->_internal_usehelpcache() <= 0 && this->_internal_usehelpcache() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_usehelpcache(), target);
  }

  // int32 HelperCore = 10;
  if (this->_internal_helpercore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_helpercore(), target);
  }

  // bool bBuildCache = 11;
  if (this->_internal_bbuildcache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_bbuildcache(), target);
  }

  // int32 BuildPriority = 12;
  if (this->_internal_buildpriority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_buildpriority(), target);
  }

  // string CpuInfo = 13;
  if (!this->_internal_cpuinfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpuinfo().data(), static_cast<int>(this->_internal_cpuinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.CpuInfo");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_cpuinfo(), target);
  }

  // float TotalHardSpace = 14;
  if (!(this->_internal_totalhardspace() <= 0 && this->_internal_totalhardspace() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_totalhardspace(), target);
  }

  // float UseHardSpace = 15;
  if (!(this->_internal_usehardspace() <= 0 && this->_internal_usehardspace() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_usehardspace(), target);
  }

  // string Ip = 16;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.Ip");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_ip(), target);
  }

  // int32 LogLevel = 17;
  if (this->_internal_loglevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_loglevel(), target);
  }

  // string LoginUser = 18;
  if (!this->_internal_loginuser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginuser().data(), static_cast<int>(this->_internal_loginuser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.LoginUser");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_loginuser(), target);
  }

  // int32 AllocationPriority = 19;
  if (this->_internal_allocationpriority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_allocationpriority(), target);
  }

  // float TotalMemory = 20;
  if (!(this->_internal_totalmemory() <= 0 && this->_internal_totalmemory() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_totalmemory(), target);
  }

  // float UseMemory = 21;
  if (!(this->_internal_usememory() <= 0 && this->_internal_usememory() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_usememory(), target);
  }

  // int32 LogicCore = 22;
  if (this->_internal_logiccore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_logiccore(), target);
  }

  // string MacAddress = 23;
  if (!this->_internal_macaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_macaddress().data(), static_cast<int>(this->_internal_macaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.MacAddress");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_macaddress(), target);
  }

  // bool bLocalConnection = 24;
  if (this->_internal_blocalconnection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_blocalconnection(), target);
  }

  // float NetworkSpeed = 25;
  if (!(this->_internal_networkspeed() <= 0 && this->_internal_networkspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_networkspeed(), target);
  }

  // string OpSystem = 26;
  if (!this->_internal_opsystem().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opsystem().data(), static_cast<int>(this->_internal_opsystem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.OpSystem");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_opsystem(), target);
  }

  // int32 PhysicalCore = 27;
  if (this->_internal_physicalcore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_physicalcore(), target);
  }

  // string RouterIp = 28;
  if (!this->_internal_routerip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_routerip().data(), static_cast<int>(this->_internal_routerip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.RouterIp");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_routerip(), target);
  }

  // bool bUpOrDown = 29;
  if (this->_internal_bupordown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_bupordown(), target);
  }

  // string UpDownTime = 30;
  if (!this->_internal_updowntime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updowntime().data(), static_cast<int>(this->_internal_updowntime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.UpDownTime");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_updowntime(), target);
  }

  // bool bEnableInitator = 31;
  if (this->_internal_benableinitator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_benableinitator(), target);
  }

  // bool bFixedInitator = 32;
  if (this->_internal_bfixedinitator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_bfixedinitator(), target);
  }

  // bool bEnableHelper = 33;
  if (this->_internal_benablehelper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_benablehelper(), target);
  }

  // bool bFixedHelper = 34;
  if (this->_internal_bfixedhelper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_bfixedhelper(), target);
  }

  // string Id = 35;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.Id");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_id(), target);
  }

  // bool bSubscribe = 36;
  if (this->_internal_bsubscribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_bsubscribe(), target);
  }

  // string message = 37;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.message");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_message(), target);
  }

  // int32 HelperPort = 38;
  if (this->_internal_helperport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_helperport(), target);
  }

  // int32 Index = 39;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_index(), target);
  }

  // int64 LastUpdate = 40;
  if (this->_internal_lastupdate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(40, this->_internal_lastupdate(), target);
  }

  // int32 MaxCon = 41;
  if (this->_internal_maxcon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_maxcon(), target);
  }

  // int32 MaxCpu = 42;
  if (this->_internal_maxcpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_maxcpu(), target);
  }

  // int32 TracePort = 43;
  if (this->_internal_traceport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_traceport(), target);
  }

  // int32 LocalMaxCpu = 44;
  if (this->_internal_localmaxcpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(44, this->_internal_localmaxcpu(), target);
  }

  // float AvalNet = 45;
  if (!(this->_internal_avalnet() <= 0 && this->_internal_avalnet() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_avalnet(), target);
  }

  // float AvaGpu = 46;
  if (!(this->_internal_avagpu() <= 0 && this->_internal_avagpu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->_internal_avagpu(), target);
  }

  // string CpuArch = 47;
  if (!this->_internal_cpuarch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpuarch().data(), static_cast<int>(this->_internal_cpuarch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.CpuArch");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_cpuarch(), target);
  }

  // string PortMappedAddress = 48;
  if (!this->_internal_portmappedaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_portmappedaddress().data(), static_cast<int>(this->_internal_portmappedaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FAgentProto.PortMappedAddress");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_portmappedaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FAgentProto)
  return target;
}

size_t FAgentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FAgentProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string Desc = 4;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string Group = 5;
  if (!this->_internal_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // string LastCon = 7;
  if (!this->_internal_lastcon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastcon());
  }

  // string CpuInfo = 13;
  if (!this->_internal_cpuinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpuinfo());
  }

  // string Ip = 16;
  if (!this->_internal_ip().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string LoginUser = 18;
  if (!this->_internal_loginuser().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginuser());
  }

  // string MacAddress = 23;
  if (!this->_internal_macaddress().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_macaddress());
  }

  // string OpSystem = 26;
  if (!this->_internal_opsystem().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opsystem());
  }

  // string RouterIp = 28;
  if (!this->_internal_routerip().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_routerip());
  }

  // string UpDownTime = 30;
  if (!this->_internal_updowntime().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updowntime());
  }

  // string Id = 35;
  if (!this->_internal_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string message = 37;
  if (!this->_internal_message().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string CpuArch = 47;
  if (!this->_internal_cpuarch().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpuarch());
  }

  // string PortMappedAddress = 48;
  if (!this->_internal_portmappedaddress().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_portmappedaddress());
  }

  // int32 Status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int32 Type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // float CpuAva = 6;
  if (!(this->_internal_cpuava() <= 0 && this->_internal_cpuava() >= 0)) {
    total_size += 1 + 4;
  }

  // float TotalHelpCache = 8;
  if (!(this->_internal_totalhelpcache() <= 0 && this->_internal_totalhelpcache() >= 0)) {
    total_size += 1 + 4;
  }

  // float UseHelpCache = 9;
  if (!(this->_internal_usehelpcache() <= 0 && this->_internal_usehelpcache() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 HelperCore = 10;
  if (this->_internal_helpercore() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_helpercore());
  }

  // int32 BuildPriority = 12;
  if (this->_internal_buildpriority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_buildpriority());
  }

  // float TotalHardSpace = 14;
  if (!(this->_internal_totalhardspace() <= 0 && this->_internal_totalhardspace() >= 0)) {
    total_size += 1 + 4;
  }

  // float UseHardSpace = 15;
  if (!(this->_internal_usehardspace() <= 0 && this->_internal_usehardspace() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 LogLevel = 17;
  if (this->_internal_loglevel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_loglevel());
  }

  // int32 AllocationPriority = 19;
  if (this->_internal_allocationpriority() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_allocationpriority());
  }

  // float TotalMemory = 20;
  if (!(this->_internal_totalmemory() <= 0 && this->_internal_totalmemory() >= 0)) {
    total_size += 2 + 4;
  }

  // float UseMemory = 21;
  if (!(this->_internal_usememory() <= 0 && this->_internal_usememory() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 LogicCore = 22;
  if (this->_internal_logiccore() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logiccore());
  }

  // bool bBuildCache = 11;
  if (this->_internal_bbuildcache() != 0) {
    total_size += 1 + 1;
  }

  // bool bLocalConnection = 24;
  if (this->_internal_blocalconnection() != 0) {
    total_size += 2 + 1;
  }

  // bool bUpOrDown = 29;
  if (this->_internal_bupordown() != 0) {
    total_size += 2 + 1;
  }

  // bool bEnableInitator = 31;
  if (this->_internal_benableinitator() != 0) {
    total_size += 2 + 1;
  }

  // float NetworkSpeed = 25;
  if (!(this->_internal_networkspeed() <= 0 && this->_internal_networkspeed() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 PhysicalCore = 27;
  if (this->_internal_physicalcore() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_physicalcore());
  }

  // bool bFixedInitator = 32;
  if (this->_internal_bfixedinitator() != 0) {
    total_size += 2 + 1;
  }

  // bool bEnableHelper = 33;
  if (this->_internal_benablehelper() != 0) {
    total_size += 2 + 1;
  }

  // bool bFixedHelper = 34;
  if (this->_internal_bfixedhelper() != 0) {
    total_size += 2 + 1;
  }

  // bool bSubscribe = 36;
  if (this->_internal_bsubscribe() != 0) {
    total_size += 2 + 1;
  }

  // int32 HelperPort = 38;
  if (this->_internal_helperport() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_helperport());
  }

  // int32 Index = 39;
  if (this->_internal_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int64 LastUpdate = 40;
  if (this->_internal_lastupdate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lastupdate());
  }

  // int32 MaxCon = 41;
  if (this->_internal_maxcon() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxcon());
  }

  // int32 MaxCpu = 42;
  if (this->_internal_maxcpu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxcpu());
  }

  // int32 TracePort = 43;
  if (this->_internal_traceport() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_traceport());
  }

  // int32 LocalMaxCpu = 44;
  if (this->_internal_localmaxcpu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_localmaxcpu());
  }

  // float AvalNet = 45;
  if (!(this->_internal_avalnet() <= 0 && this->_internal_avalnet() >= 0)) {
    total_size += 2 + 4;
  }

  // float AvaGpu = 46;
  if (!(this->_internal_avagpu() <= 0 && this->_internal_avagpu() >= 0)) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FAgentProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FAgentProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FAgentProto::GetClassData() const { return &_class_data_; }

void FAgentProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FAgentProto *>(to)->MergeFrom(
      static_cast<const FAgentProto &>(from));
}


void FAgentProto::MergeFrom(const FAgentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FAgentProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (!from._internal_group().empty()) {
    _internal_set_group(from._internal_group());
  }
  if (!from._internal_lastcon().empty()) {
    _internal_set_lastcon(from._internal_lastcon());
  }
  if (!from._internal_cpuinfo().empty()) {
    _internal_set_cpuinfo(from._internal_cpuinfo());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_loginuser().empty()) {
    _internal_set_loginuser(from._internal_loginuser());
  }
  if (!from._internal_macaddress().empty()) {
    _internal_set_macaddress(from._internal_macaddress());
  }
  if (!from._internal_opsystem().empty()) {
    _internal_set_opsystem(from._internal_opsystem());
  }
  if (!from._internal_routerip().empty()) {
    _internal_set_routerip(from._internal_routerip());
  }
  if (!from._internal_updowntime().empty()) {
    _internal_set_updowntime(from._internal_updowntime());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_cpuarch().empty()) {
    _internal_set_cpuarch(from._internal_cpuarch());
  }
  if (!from._internal_portmappedaddress().empty()) {
    _internal_set_portmappedaddress(from._internal_portmappedaddress());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from._internal_cpuava() <= 0 && from._internal_cpuava() >= 0)) {
    _internal_set_cpuava(from._internal_cpuava());
  }
  if (!(from._internal_totalhelpcache() <= 0 && from._internal_totalhelpcache() >= 0)) {
    _internal_set_totalhelpcache(from._internal_totalhelpcache());
  }
  if (!(from._internal_usehelpcache() <= 0 && from._internal_usehelpcache() >= 0)) {
    _internal_set_usehelpcache(from._internal_usehelpcache());
  }
  if (from._internal_helpercore() != 0) {
    _internal_set_helpercore(from._internal_helpercore());
  }
  if (from._internal_buildpriority() != 0) {
    _internal_set_buildpriority(from._internal_buildpriority());
  }
  if (!(from._internal_totalhardspace() <= 0 && from._internal_totalhardspace() >= 0)) {
    _internal_set_totalhardspace(from._internal_totalhardspace());
  }
  if (!(from._internal_usehardspace() <= 0 && from._internal_usehardspace() >= 0)) {
    _internal_set_usehardspace(from._internal_usehardspace());
  }
  if (from._internal_loglevel() != 0) {
    _internal_set_loglevel(from._internal_loglevel());
  }
  if (from._internal_allocationpriority() != 0) {
    _internal_set_allocationpriority(from._internal_allocationpriority());
  }
  if (!(from._internal_totalmemory() <= 0 && from._internal_totalmemory() >= 0)) {
    _internal_set_totalmemory(from._internal_totalmemory());
  }
  if (!(from._internal_usememory() <= 0 && from._internal_usememory() >= 0)) {
    _internal_set_usememory(from._internal_usememory());
  }
  if (from._internal_logiccore() != 0) {
    _internal_set_logiccore(from._internal_logiccore());
  }
  if (from._internal_bbuildcache() != 0) {
    _internal_set_bbuildcache(from._internal_bbuildcache());
  }
  if (from._internal_blocalconnection() != 0) {
    _internal_set_blocalconnection(from._internal_blocalconnection());
  }
  if (from._internal_bupordown() != 0) {
    _internal_set_bupordown(from._internal_bupordown());
  }
  if (from._internal_benableinitator() != 0) {
    _internal_set_benableinitator(from._internal_benableinitator());
  }
  if (!(from._internal_networkspeed() <= 0 && from._internal_networkspeed() >= 0)) {
    _internal_set_networkspeed(from._internal_networkspeed());
  }
  if (from._internal_physicalcore() != 0) {
    _internal_set_physicalcore(from._internal_physicalcore());
  }
  if (from._internal_bfixedinitator() != 0) {
    _internal_set_bfixedinitator(from._internal_bfixedinitator());
  }
  if (from._internal_benablehelper() != 0) {
    _internal_set_benablehelper(from._internal_benablehelper());
  }
  if (from._internal_bfixedhelper() != 0) {
    _internal_set_bfixedhelper(from._internal_bfixedhelper());
  }
  if (from._internal_bsubscribe() != 0) {
    _internal_set_bsubscribe(from._internal_bsubscribe());
  }
  if (from._internal_helperport() != 0) {
    _internal_set_helperport(from._internal_helperport());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_lastupdate() != 0) {
    _internal_set_lastupdate(from._internal_lastupdate());
  }
  if (from._internal_maxcon() != 0) {
    _internal_set_maxcon(from._internal_maxcon());
  }
  if (from._internal_maxcpu() != 0) {
    _internal_set_maxcpu(from._internal_maxcpu());
  }
  if (from._internal_traceport() != 0) {
    _internal_set_traceport(from._internal_traceport());
  }
  if (from._internal_localmaxcpu() != 0) {
    _internal_set_localmaxcpu(from._internal_localmaxcpu());
  }
  if (!(from._internal_avalnet() <= 0 && from._internal_avalnet() >= 0)) {
    _internal_set_avalnet(from._internal_avalnet());
  }
  if (!(from._internal_avagpu() <= 0 && from._internal_avagpu() >= 0)) {
    _internal_set_avagpu(from._internal_avagpu());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FAgentProto::CopyFrom(const FAgentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FAgentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FAgentProto::IsInitialized() const {
  return true;
}

void FAgentProto::InternalSwap(FAgentProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_, lhs_arena,
      &other->group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lastcon_, lhs_arena,
      &other->lastcon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpuinfo_, lhs_arena,
      &other->cpuinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loginuser_, lhs_arena,
      &other->loginuser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &macaddress_, lhs_arena,
      &other->macaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &opsystem_, lhs_arena,
      &other->opsystem_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &routerip_, lhs_arena,
      &other->routerip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updowntime_, lhs_arena,
      &other->updowntime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpuarch_, lhs_arena,
      &other->cpuarch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &portmappedaddress_, lhs_arena,
      &other->portmappedaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FAgentProto, avagpu_)
      + sizeof(FAgentProto::avagpu_)
      - PROTOBUF_FIELD_OFFSET(FAgentProto, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FAgentProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_agent_2eproto_getter, &descriptor_table_agent_2eproto_once,
      file_level_metadata_agent_2eproto[0]);
}

// ===================================================================

class FAgentArrayProto::_Internal {
 public:
};

FAgentArrayProto::FAgentArrayProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  agents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FAgentArrayProto)
}
FAgentArrayProto::FAgentArrayProto(const FAgentArrayProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FAgentArrayProto)
}

void FAgentArrayProto::SharedCtor() {
}

FAgentArrayProto::~FAgentArrayProto() {
  // @@protoc_insertion_point(destructor:FAgentArrayProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FAgentArrayProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FAgentArrayProto::ArenaDtor(void* object) {
  FAgentArrayProto* _this = reinterpret_cast< FAgentArrayProto* >(object);
  (void)_this;
}
void FAgentArrayProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FAgentArrayProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FAgentArrayProto::Clear() {
// @@protoc_insertion_point(message_clear_start:FAgentArrayProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FAgentArrayProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .FAgentProto Agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FAgentArrayProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FAgentArrayProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FAgentProto Agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FAgentArrayProto)
  return target;
}

size_t FAgentArrayProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FAgentArrayProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FAgentProto Agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FAgentArrayProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FAgentArrayProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FAgentArrayProto::GetClassData() const { return &_class_data_; }

void FAgentArrayProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FAgentArrayProto *>(to)->MergeFrom(
      static_cast<const FAgentArrayProto &>(from));
}


void FAgentArrayProto::MergeFrom(const FAgentArrayProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FAgentArrayProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FAgentArrayProto::CopyFrom(const FAgentArrayProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FAgentArrayProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FAgentArrayProto::IsInitialized() const {
  return true;
}

void FAgentArrayProto::InternalSwap(FAgentArrayProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FAgentArrayProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_agent_2eproto_getter, &descriptor_table_agent_2eproto_once,
      file_level_metadata_agent_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FAgentProto* Arena::CreateMaybeMessage< ::FAgentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FAgentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::FAgentArrayProto* Arena::CreateMaybeMessage< ::FAgentArrayProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FAgentArrayProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
