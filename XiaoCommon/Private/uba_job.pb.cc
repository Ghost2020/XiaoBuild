// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uba_job.proto

#include "uba_job.pb.h"

#if defined(PLATFORM_WINDOWS)
#pragma warning(disable : 4125 4800)
#endif

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr FUbaJob::FUbaJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : application_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , arguments_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workingdir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , inputfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , outputfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , knowninputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bwriteoutputfilesonfail_(false)
  , weight_(0)
  , jobid_(0){}
struct FUbaJobDefaultTypeInternal {
  constexpr FUbaJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FUbaJobDefaultTypeInternal() {}
  union {
    FUbaJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FUbaJobDefaultTypeInternal _FUbaJob_default_instance_;
constexpr FLogLine::FLogLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct FLogLineDefaultTypeInternal {
  constexpr FLogLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FLogLineDefaultTypeInternal() {}
  union {
    FLogLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FLogLineDefaultTypeInternal _FLogLine_default_instance_;
constexpr FUbaStats::FUbaStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : queued_(0u)
  , activelocal_(0u)
  , activeremote_(0u)
  , finished_(0u){}
struct FUbaStatsDefaultTypeInternal {
  constexpr FUbaStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FUbaStatsDefaultTypeInternal() {}
  union {
    FUbaStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FUbaStatsDefaultTypeInternal _FUbaStats_default_instance_;
constexpr FUbaOutput::FUbaOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stats_(nullptr)
  , exitcode_(0)
  , jobid_(0){}
struct FUbaOutputDefaultTypeInternal {
  constexpr FUbaOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FUbaOutputDefaultTypeInternal() {}
  union {
    FUbaOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FUbaOutputDefaultTypeInternal _FUbaOutput_default_instance_;
constexpr FUbaExit::FUbaExit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bexit_(false){}
struct FUbaExitDefaultTypeInternal {
  constexpr FUbaExitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FUbaExitDefaultTypeInternal() {}
  union {
    FUbaExit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FUbaExitDefaultTypeInternal _FUbaExit_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_uba_5fjob_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_uba_5fjob_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_uba_5fjob_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_uba_5fjob_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FUbaJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FUbaJob, application_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, arguments_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, description_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, workingdir_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, bwriteoutputfilesonfail_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, logfile_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, inputfile_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, outputfile_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, weight_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, knowninputs_),
  PROTOBUF_FIELD_OFFSET(::FUbaJob, jobid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLogLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLogLine, text_),
  PROTOBUF_FIELD_OFFSET(::FLogLine, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FUbaStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FUbaStats, queued_),
  PROTOBUF_FIELD_OFFSET(::FUbaStats, activelocal_),
  PROTOBUF_FIELD_OFFSET(::FUbaStats, activeremote_),
  PROTOBUF_FIELD_OFFSET(::FUbaStats, finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FUbaOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FUbaOutput, exitcode_),
  PROTOBUF_FIELD_OFFSET(::FUbaOutput, outputs_),
  PROTOBUF_FIELD_OFFSET(::FUbaOutput, stats_),
  PROTOBUF_FIELD_OFFSET(::FUbaOutput, jobid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FUbaExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FUbaExit, bexit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FUbaJob)},
  { 17, -1, -1, sizeof(::FLogLine)},
  { 25, -1, -1, sizeof(::FUbaStats)},
  { 35, -1, -1, sizeof(::FUbaOutput)},
  { 45, -1, -1, sizeof(::FUbaExit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FUbaJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FLogLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FUbaStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FUbaOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FUbaExit_default_instance_),
};

const char descriptor_table_protodef_uba_5fjob_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ruba_job.proto\"\347\001\n\007FUbaJob\022\023\n\013applicati"
  "on\030\001 \001(\t\022\021\n\targuments\030\002 \001(\t\022\023\n\013descripti"
  "on\030\003 \001(\t\022\022\n\nworkingDir\030\004 \001(\t\022\037\n\027bWriteOu"
  "tputFilesOnFail\030\005 \001(\010\022\017\n\007logFile\030\006 \001(\t\022\021"
  "\n\tinputFile\030\007 \001(\t\022\022\n\nOutputFile\030\010 \001(\t\022\016\n"
  "\006weight\030\t \001(\002\022\023\n\013knownInputs\030\n \001(\t\022\r\n\005jo"
  "bId\030\013 \001(\005\"1\n\010FLogLine\022\014\n\004text\030\001 \001(\t\022\027\n\004t"
  "ype\030\002 \001(\0162\t.ELogType\"X\n\tFUbaStats\022\016\n\006que"
  "ued\030\001 \001(\r\022\023\n\013activeLocal\030\002 \001(\r\022\024\n\014active"
  "Remote\030\003 \001(\r\022\020\n\010finished\030\004 \001(\r\"Y\n\nFUbaOu"
  "tput\022\020\n\010exitCode\030\001 \001(\005\022\017\n\007outputs\030\002 \001(\t\022"
  "\031\n\005stats\030\003 \001(\0132\n.FUbaStats\022\r\n\005jobId\030\004 \001("
  "\005\"\031\n\010FUbaExit\022\r\n\005bExit\030\001 \001(\010*R\n\010ELogType"
  "\022\014\n\010Lt_Error\020\000\022\016\n\nLt_Warning\020\001\022\013\n\007Lt_Inf"
  "o\020\002\022\r\n\tLt_Detail\020\003\022\014\n\010Lt_Debug\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_uba_5fjob_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uba_5fjob_2eproto = {
  false, false, 600, descriptor_table_protodef_uba_5fjob_2eproto, "uba_job.proto", 
  &descriptor_table_uba_5fjob_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_uba_5fjob_2eproto::offsets,
  file_level_metadata_uba_5fjob_2eproto, file_level_enum_descriptors_uba_5fjob_2eproto, file_level_service_descriptors_uba_5fjob_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_uba_5fjob_2eproto_getter() {
  return &descriptor_table_uba_5fjob_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_uba_5fjob_2eproto(&descriptor_table_uba_5fjob_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uba_5fjob_2eproto);
  return file_level_enum_descriptors_uba_5fjob_2eproto[0];
}
bool ELogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FUbaJob::_Internal {
 public:
};

FUbaJob::FUbaJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FUbaJob)
}
FUbaJob::FUbaJob(const FUbaJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application().empty()) {
    application_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application(), 
      GetArenaForAllocation());
  }
  arguments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_arguments().empty()) {
    arguments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_arguments(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workingdir().empty()) {
    workingdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workingdir(), 
      GetArenaForAllocation());
  }
  logfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logfile().empty()) {
    logfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logfile(), 
      GetArenaForAllocation());
  }
  inputfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inputfile().empty()) {
    inputfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inputfile(), 
      GetArenaForAllocation());
  }
  outputfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outputfile().empty()) {
    outputfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outputfile(), 
      GetArenaForAllocation());
  }
  knowninputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_knowninputs().empty()) {
    knowninputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_knowninputs(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bwriteoutputfilesonfail_, &from.bwriteoutputfilesonfail_,
    static_cast<size_t>(reinterpret_cast<char*>(&jobid_) -
    reinterpret_cast<char*>(&bwriteoutputfilesonfail_)) + sizeof(jobid_));
  // @@protoc_insertion_point(copy_constructor:FUbaJob)
}

void FUbaJob::SharedCtor() {
application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
arguments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
inputfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
outputfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
knowninputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bwriteoutputfilesonfail_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&jobid_) -
    reinterpret_cast<char*>(&bwriteoutputfilesonfail_)) + sizeof(jobid_));
}

FUbaJob::~FUbaJob() {
  // @@protoc_insertion_point(destructor:FUbaJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FUbaJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  application_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arguments_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workingdir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inputfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  knowninputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FUbaJob::ArenaDtor(void* object) {
  FUbaJob* _this = reinterpret_cast< FUbaJob* >(object);
  (void)_this;
}
void FUbaJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FUbaJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FUbaJob::Clear() {
// @@protoc_insertion_point(message_clear_start:FUbaJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_.ClearToEmpty();
  arguments_.ClearToEmpty();
  description_.ClearToEmpty();
  workingdir_.ClearToEmpty();
  logfile_.ClearToEmpty();
  inputfile_.ClearToEmpty();
  outputfile_.ClearToEmpty();
  knowninputs_.ClearToEmpty();
  ::memset(&bwriteoutputfilesonfail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jobid_) -
      reinterpret_cast<char*>(&bwriteoutputfilesonfail_)) + sizeof(jobid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FUbaJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string application = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_application();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaJob.application"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_arguments();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaJob.arguments"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaJob.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string workingDir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_workingdir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaJob.workingDir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bWriteOutputFilesOnFail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bwriteoutputfilesonfail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string logFile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_logfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaJob.logFile"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string inputFile = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_inputfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaJob.inputFile"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OutputFile = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_outputfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaJob.OutputFile"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string knownInputs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_knowninputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaJob.knownInputs"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jobId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          jobid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FUbaJob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FUbaJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application = 1;
  if (!this->_internal_application().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application().data(), static_cast<int>(this->_internal_application().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaJob.application");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_application(), target);
  }

  // string arguments = 2;
  if (!this->_internal_arguments().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arguments().data(), static_cast<int>(this->_internal_arguments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaJob.arguments");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arguments(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaJob.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string workingDir = 4;
  if (!this->_internal_workingdir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workingdir().data(), static_cast<int>(this->_internal_workingdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaJob.workingDir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_workingdir(), target);
  }

  // bool bWriteOutputFilesOnFail = 5;
  if (this->_internal_bwriteoutputfilesonfail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bwriteoutputfilesonfail(), target);
  }

  // string logFile = 6;
  if (!this->_internal_logfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logfile().data(), static_cast<int>(this->_internal_logfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaJob.logFile");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_logfile(), target);
  }

  // string inputFile = 7;
  if (!this->_internal_inputfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inputfile().data(), static_cast<int>(this->_internal_inputfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaJob.inputFile");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_inputfile(), target);
  }

  // string OutputFile = 8;
  if (!this->_internal_outputfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputfile().data(), static_cast<int>(this->_internal_outputfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaJob.OutputFile");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_outputfile(), target);
  }

  // float weight = 9;
  if (!(this->_internal_weight() <= 0 && this->_internal_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_weight(), target);
  }

  // string knownInputs = 10;
  if (!this->_internal_knowninputs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_knowninputs().data(), static_cast<int>(this->_internal_knowninputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaJob.knownInputs");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_knowninputs(), target);
  }

  // int32 jobId = 11;
  if (this->_internal_jobid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_jobid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FUbaJob)
  return target;
}

size_t FUbaJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FUbaJob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string application = 1;
  if (!this->_internal_application().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application());
  }

  // string arguments = 2;
  if (!this->_internal_arguments().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arguments());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string workingDir = 4;
  if (!this->_internal_workingdir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workingdir());
  }

  // string logFile = 6;
  if (!this->_internal_logfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logfile());
  }

  // string inputFile = 7;
  if (!this->_internal_inputfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inputfile());
  }

  // string OutputFile = 8;
  if (!this->_internal_outputfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputfile());
  }

  // string knownInputs = 10;
  if (!this->_internal_knowninputs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_knowninputs());
  }

  // bool bWriteOutputFilesOnFail = 5;
  if (this->_internal_bwriteoutputfilesonfail() != 0) {
    total_size += 1 + 1;
  }

  // float weight = 9;
  if (!(this->_internal_weight() <= 0 && this->_internal_weight() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 jobId = 11;
  if (this->_internal_jobid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_jobid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FUbaJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FUbaJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FUbaJob::GetClassData() const { return &_class_data_; }

void FUbaJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FUbaJob *>(to)->MergeFrom(
      static_cast<const FUbaJob &>(from));
}


void FUbaJob::MergeFrom(const FUbaJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FUbaJob)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_application().empty()) {
    _internal_set_application(from._internal_application());
  }
  if (!from._internal_arguments().empty()) {
    _internal_set_arguments(from._internal_arguments());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_workingdir().empty()) {
    _internal_set_workingdir(from._internal_workingdir());
  }
  if (!from._internal_logfile().empty()) {
    _internal_set_logfile(from._internal_logfile());
  }
  if (!from._internal_inputfile().empty()) {
    _internal_set_inputfile(from._internal_inputfile());
  }
  if (!from._internal_outputfile().empty()) {
    _internal_set_outputfile(from._internal_outputfile());
  }
  if (!from._internal_knowninputs().empty()) {
    _internal_set_knowninputs(from._internal_knowninputs());
  }
  if (from._internal_bwriteoutputfilesonfail() != 0) {
    _internal_set_bwriteoutputfilesonfail(from._internal_bwriteoutputfilesonfail());
  }
  if (!(from._internal_weight() <= 0 && from._internal_weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_jobid() != 0) {
    _internal_set_jobid(from._internal_jobid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FUbaJob::CopyFrom(const FUbaJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FUbaJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FUbaJob::IsInitialized() const {
  return true;
}

void FUbaJob::InternalSwap(FUbaJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_, lhs_arena,
      &other->application_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &arguments_, lhs_arena,
      &other->arguments_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workingdir_, lhs_arena,
      &other->workingdir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logfile_, lhs_arena,
      &other->logfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &inputfile_, lhs_arena,
      &other->inputfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &outputfile_, lhs_arena,
      &other->outputfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &knowninputs_, lhs_arena,
      &other->knowninputs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FUbaJob, jobid_)
      + sizeof(FUbaJob::jobid_)
      - PROTOBUF_FIELD_OFFSET(FUbaJob, bwriteoutputfilesonfail_)>(
          reinterpret_cast<char*>(&bwriteoutputfilesonfail_),
          reinterpret_cast<char*>(&other->bwriteoutputfilesonfail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FUbaJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uba_5fjob_2eproto_getter, &descriptor_table_uba_5fjob_2eproto_once,
      file_level_metadata_uba_5fjob_2eproto[0]);
}

// ===================================================================

class FLogLine::_Internal {
 public:
};

FLogLine::FLogLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLogLine)
}
FLogLine::FLogLine(const FLogLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:FLogLine)
}

void FLogLine::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

FLogLine::~FLogLine() {
  // @@protoc_insertion_point(destructor:FLogLine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FLogLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FLogLine::ArenaDtor(void* object) {
  FLogLine* _this = reinterpret_cast< FLogLine* >(object);
  (void)_this;
}
void FLogLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FLogLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FLogLine::Clear() {
// @@protoc_insertion_point(message_clear_start:FLogLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FLogLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLogLine.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ELogType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ELogType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FLogLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLogLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLogLine.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .ELogType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLogLine)
  return target;
}

size_t FLogLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLogLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ELogType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FLogLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FLogLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FLogLine::GetClassData() const { return &_class_data_; }

void FLogLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FLogLine *>(to)->MergeFrom(
      static_cast<const FLogLine &>(from));
}


void FLogLine::MergeFrom(const FLogLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLogLine)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FLogLine::CopyFrom(const FLogLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLogLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLogLine::IsInitialized() const {
  return true;
}

void FLogLine::InternalSwap(FLogLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FLogLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uba_5fjob_2eproto_getter, &descriptor_table_uba_5fjob_2eproto_once,
      file_level_metadata_uba_5fjob_2eproto[1]);
}

// ===================================================================

class FUbaStats::_Internal {
 public:
};

FUbaStats::FUbaStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FUbaStats)
}
FUbaStats::FUbaStats(const FUbaStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&queued_, &from.queued_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&queued_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:FUbaStats)
}

void FUbaStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&queued_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&queued_)) + sizeof(finished_));
}

FUbaStats::~FUbaStats() {
  // @@protoc_insertion_point(destructor:FUbaStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FUbaStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FUbaStats::ArenaDtor(void* object) {
  FUbaStats* _this = reinterpret_cast< FUbaStats* >(object);
  (void)_this;
}
void FUbaStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FUbaStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FUbaStats::Clear() {
// @@protoc_insertion_point(message_clear_start:FUbaStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&queued_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&queued_)) + sizeof(finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FUbaStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 queued = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          queued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 activeLocal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          activelocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 activeRemote = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          activeremote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 finished = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FUbaStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FUbaStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 queued = 1;
  if (this->_internal_queued() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_queued(), target);
  }

  // uint32 activeLocal = 2;
  if (this->_internal_activelocal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_activelocal(), target);
  }

  // uint32 activeRemote = 3;
  if (this->_internal_activeremote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_activeremote(), target);
  }

  // uint32 finished = 4;
  if (this->_internal_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FUbaStats)
  return target;
}

size_t FUbaStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FUbaStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 queued = 1;
  if (this->_internal_queued() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_queued());
  }

  // uint32 activeLocal = 2;
  if (this->_internal_activelocal() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_activelocal());
  }

  // uint32 activeRemote = 3;
  if (this->_internal_activeremote() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_activeremote());
  }

  // uint32 finished = 4;
  if (this->_internal_finished() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_finished());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FUbaStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FUbaStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FUbaStats::GetClassData() const { return &_class_data_; }

void FUbaStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FUbaStats *>(to)->MergeFrom(
      static_cast<const FUbaStats &>(from));
}


void FUbaStats::MergeFrom(const FUbaStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FUbaStats)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_queued() != 0) {
    _internal_set_queued(from._internal_queued());
  }
  if (from._internal_activelocal() != 0) {
    _internal_set_activelocal(from._internal_activelocal());
  }
  if (from._internal_activeremote() != 0) {
    _internal_set_activeremote(from._internal_activeremote());
  }
  if (from._internal_finished() != 0) {
    _internal_set_finished(from._internal_finished());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FUbaStats::CopyFrom(const FUbaStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FUbaStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FUbaStats::IsInitialized() const {
  return true;
}

void FUbaStats::InternalSwap(FUbaStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FUbaStats, finished_)
      + sizeof(FUbaStats::finished_)
      - PROTOBUF_FIELD_OFFSET(FUbaStats, queued_)>(
          reinterpret_cast<char*>(&queued_),
          reinterpret_cast<char*>(&other->queued_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FUbaStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uba_5fjob_2eproto_getter, &descriptor_table_uba_5fjob_2eproto_once,
      file_level_metadata_uba_5fjob_2eproto[2]);
}

// ===================================================================

class FUbaOutput::_Internal {
 public:
  static const ::FUbaStats& stats(const FUbaOutput* msg);
};

const ::FUbaStats&
FUbaOutput::_Internal::stats(const FUbaOutput* msg) {
  return *msg->stats_;
}
FUbaOutput::FUbaOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FUbaOutput)
}
FUbaOutput::FUbaOutput(const FUbaOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  outputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outputs().empty()) {
    outputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outputs(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stats()) {
    stats_ = new ::FUbaStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  ::memcpy(&exitcode_, &from.exitcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&jobid_) -
    reinterpret_cast<char*>(&exitcode_)) + sizeof(jobid_));
  // @@protoc_insertion_point(copy_constructor:FUbaOutput)
}

void FUbaOutput::SharedCtor() {
outputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&jobid_) -
    reinterpret_cast<char*>(&stats_)) + sizeof(jobid_));
}

FUbaOutput::~FUbaOutput() {
  // @@protoc_insertion_point(destructor:FUbaOutput)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FUbaOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  outputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void FUbaOutput::ArenaDtor(void* object) {
  FUbaOutput* _this = reinterpret_cast< FUbaOutput* >(object);
  (void)_this;
}
void FUbaOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FUbaOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FUbaOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:FUbaOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  ::memset(&exitcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jobid_) -
      reinterpret_cast<char*>(&exitcode_)) + sizeof(jobid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FUbaOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 exitCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exitcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_outputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FUbaOutput.outputs"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FUbaStats stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 jobId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          jobid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FUbaOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FUbaOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exitCode = 1;
  if (this->_internal_exitcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_exitcode(), target);
  }

  // string outputs = 2;
  if (!this->_internal_outputs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputs().data(), static_cast<int>(this->_internal_outputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FUbaOutput.outputs");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_outputs(), target);
  }

  // .FUbaStats stats = 3;
  if (this->_internal_has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stats(this), target, stream);
  }

  // int32 jobId = 4;
  if (this->_internal_jobid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_jobid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FUbaOutput)
  return target;
}

size_t FUbaOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FUbaOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string outputs = 2;
  if (!this->_internal_outputs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputs());
  }

  // .FUbaStats stats = 3;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // int32 exitCode = 1;
  if (this->_internal_exitcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exitcode());
  }

  // int32 jobId = 4;
  if (this->_internal_jobid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_jobid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FUbaOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FUbaOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FUbaOutput::GetClassData() const { return &_class_data_; }

void FUbaOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FUbaOutput *>(to)->MergeFrom(
      static_cast<const FUbaOutput &>(from));
}


void FUbaOutput::MergeFrom(const FUbaOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FUbaOutput)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_outputs().empty()) {
    _internal_set_outputs(from._internal_outputs());
  }
  if (from._internal_has_stats()) {
    _internal_mutable_stats()->::FUbaStats::MergeFrom(from._internal_stats());
  }
  if (from._internal_exitcode() != 0) {
    _internal_set_exitcode(from._internal_exitcode());
  }
  if (from._internal_jobid() != 0) {
    _internal_set_jobid(from._internal_jobid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FUbaOutput::CopyFrom(const FUbaOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FUbaOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FUbaOutput::IsInitialized() const {
  return true;
}

void FUbaOutput::InternalSwap(FUbaOutput* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &outputs_, lhs_arena,
      &other->outputs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FUbaOutput, jobid_)
      + sizeof(FUbaOutput::jobid_)
      - PROTOBUF_FIELD_OFFSET(FUbaOutput, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FUbaOutput::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uba_5fjob_2eproto_getter, &descriptor_table_uba_5fjob_2eproto_once,
      file_level_metadata_uba_5fjob_2eproto[3]);
}

// ===================================================================

class FUbaExit::_Internal {
 public:
};

FUbaExit::FUbaExit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FUbaExit)
}
FUbaExit::FUbaExit(const FUbaExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bexit_ = from.bexit_;
  // @@protoc_insertion_point(copy_constructor:FUbaExit)
}

void FUbaExit::SharedCtor() {
bexit_ = false;
}

FUbaExit::~FUbaExit() {
  // @@protoc_insertion_point(destructor:FUbaExit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FUbaExit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FUbaExit::ArenaDtor(void* object) {
  FUbaExit* _this = reinterpret_cast< FUbaExit* >(object);
  (void)_this;
}
void FUbaExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FUbaExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FUbaExit::Clear() {
// @@protoc_insertion_point(message_clear_start:FUbaExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bexit_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FUbaExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bExit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bexit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FUbaExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FUbaExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bExit = 1;
  if (this->_internal_bexit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bexit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FUbaExit)
  return target;
}

size_t FUbaExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FUbaExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bExit = 1;
  if (this->_internal_bexit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FUbaExit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FUbaExit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FUbaExit::GetClassData() const { return &_class_data_; }

void FUbaExit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FUbaExit *>(to)->MergeFrom(
      static_cast<const FUbaExit &>(from));
}


void FUbaExit::MergeFrom(const FUbaExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FUbaExit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bexit() != 0) {
    _internal_set_bexit(from._internal_bexit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FUbaExit::CopyFrom(const FUbaExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FUbaExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FUbaExit::IsInitialized() const {
  return true;
}

void FUbaExit::InternalSwap(FUbaExit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bexit_, other->bexit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FUbaExit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uba_5fjob_2eproto_getter, &descriptor_table_uba_5fjob_2eproto_once,
      file_level_metadata_uba_5fjob_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FUbaJob* Arena::CreateMaybeMessage< ::FUbaJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FUbaJob >(arena);
}
template<> PROTOBUF_NOINLINE ::FLogLine* Arena::CreateMaybeMessage< ::FLogLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLogLine >(arena);
}
template<> PROTOBUF_NOINLINE ::FUbaStats* Arena::CreateMaybeMessage< ::FUbaStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FUbaStats >(arena);
}
template<> PROTOBUF_NOINLINE ::FUbaOutput* Arena::CreateMaybeMessage< ::FUbaOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FUbaOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::FUbaExit* Arena::CreateMaybeMessage< ::FUbaExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FUbaExit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
