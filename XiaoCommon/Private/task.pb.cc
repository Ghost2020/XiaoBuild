// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#include "task.pb.h"

#if defined(PLATFORM_WINDOWS)
#pragma warning(disable : 4125 4800)
#endif

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr FTaskProto::FTaskProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dependence_()
  , caption_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cmd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , allow_remote_(false)
  , wait_(false)
  , priority_(0){}
struct FTaskProtoDefaultTypeInternal {
  constexpr FTaskProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FTaskProtoDefaultTypeInternal() {}
  union {
    FTaskProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FTaskProtoDefaultTypeInternal _FTaskProto_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_task_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_task_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_task_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_task_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FTaskProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FTaskProto, caption_),
  PROTOBUF_FIELD_OFFSET(::FTaskProto, cmd_),
  PROTOBUF_FIELD_OFFSET(::FTaskProto, params_),
  PROTOBUF_FIELD_OFFSET(::FTaskProto, group_),
  PROTOBUF_FIELD_OFFSET(::FTaskProto, dependence_),
  PROTOBUF_FIELD_OFFSET(::FTaskProto, allow_remote_),
  PROTOBUF_FIELD_OFFSET(::FTaskProto, wait_),
  PROTOBUF_FIELD_OFFSET(::FTaskProto, priority_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FTaskProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FTaskProto_default_instance_),
};

const char descriptor_table_protodef_task_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntask.proto\"\223\001\n\nFTaskProto\022\017\n\007caption\030\001"
  " \001(\t\022\013\n\003cmd\030\002 \001(\t\022\016\n\006params\030\003 \001(\t\022\r\n\005gro"
  "up\030\004 \001(\t\022\022\n\ndependence\030\005 \003(\t\022\024\n\014allow_re"
  "mote\030\006 \001(\010\022\014\n\004wait\030\007 \001(\010\022\020\n\010priority\030\010 \001"
  "(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_task_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_2eproto = {
  false, false, 170, descriptor_table_protodef_task_2eproto, "task.proto", 
  &descriptor_table_task_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_task_2eproto::offsets,
  file_level_metadata_task_2eproto, file_level_enum_descriptors_task_2eproto, file_level_service_descriptors_task_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_task_2eproto_getter() {
  return &descriptor_table_task_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_task_2eproto(&descriptor_table_task_2eproto);

// ===================================================================

class FTaskProto::_Internal {
 public:
};

FTaskProto::FTaskProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dependence_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FTaskProto)
}
FTaskProto::FTaskProto(const FTaskProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dependence_(from.dependence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caption().empty()) {
    caption_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caption(), 
      GetArenaForAllocation());
  }
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmd().empty()) {
    cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cmd(), 
      GetArenaForAllocation());
  }
  params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_params().empty()) {
    params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_params(), 
      GetArenaForAllocation());
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group().empty()) {
    group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group(), 
      GetArenaForAllocation());
  }
  ::memcpy(&allow_remote_, &from.allow_remote_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&allow_remote_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:FTaskProto)
}

void FTaskProto::SharedCtor() {
caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&allow_remote_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&allow_remote_)) + sizeof(priority_));
}

FTaskProto::~FTaskProto() {
  // @@protoc_insertion_point(destructor:FTaskProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FTaskProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FTaskProto::ArenaDtor(void* object) {
  FTaskProto* _this = reinterpret_cast< FTaskProto* >(object);
  (void)_this;
}
void FTaskProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FTaskProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FTaskProto::Clear() {
// @@protoc_insertion_point(message_clear_start:FTaskProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependence_.Clear();
  caption_.ClearToEmpty();
  cmd_.ClearToEmpty();
  params_.ClearToEmpty();
  group_.ClearToEmpty();
  ::memset(&allow_remote_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&allow_remote_)) + sizeof(priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FTaskProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string caption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTaskProto.caption"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTaskProto.cmd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTaskProto.params"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTaskProto.group"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string dependence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dependence();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FTaskProto.dependence"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool allow_remote = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          allow_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool wait = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FTaskProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FTaskProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string caption = 1;
  if (!this->_internal_caption().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FTaskProto.caption");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_caption(), target);
  }

  // string cmd = 2;
  if (!this->_internal_cmd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FTaskProto.cmd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cmd(), target);
  }

  // string params = 3;
  if (!this->_internal_params().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_params().data(), static_cast<int>(this->_internal_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FTaskProto.params");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_params(), target);
  }

  // string group = 4;
  if (!this->_internal_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FTaskProto.group");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group(), target);
  }

  // repeated string dependence = 5;
  for (int i = 0, n = this->_internal_dependence_size(); i < n; i++) {
    const auto& s = this->_internal_dependence(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FTaskProto.dependence");
    target = stream->WriteString(5, s, target);
  }

  // bool allow_remote = 6;
  if (this->_internal_allow_remote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_allow_remote(), target);
  }

  // bool wait = 7;
  if (this->_internal_wait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_wait(), target);
  }

  // int32 priority = 8;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FTaskProto)
  return target;
}

size_t FTaskProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FTaskProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dependence = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dependence_.size());
  for (int i = 0, n = dependence_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dependence_.Get(i));
  }

  // string caption = 1;
  if (!this->_internal_caption().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caption());
  }

  // string cmd = 2;
  if (!this->_internal_cmd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd());
  }

  // string params = 3;
  if (!this->_internal_params().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_params());
  }

  // string group = 4;
  if (!this->_internal_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // bool allow_remote = 6;
  if (this->_internal_allow_remote() != 0) {
    total_size += 1 + 1;
  }

  // bool wait = 7;
  if (this->_internal_wait() != 0) {
    total_size += 1 + 1;
  }

  // int32 priority = 8;
  if (this->_internal_priority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FTaskProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FTaskProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FTaskProto::GetClassData() const { return &_class_data_; }

void FTaskProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FTaskProto *>(to)->MergeFrom(
      static_cast<const FTaskProto &>(from));
}


void FTaskProto::MergeFrom(const FTaskProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FTaskProto)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dependence_.MergeFrom(from.dependence_);
  if (!from._internal_caption().empty()) {
    _internal_set_caption(from._internal_caption());
  }
  if (!from._internal_cmd().empty()) {
    _internal_set_cmd(from._internal_cmd());
  }
  if (!from._internal_params().empty()) {
    _internal_set_params(from._internal_params());
  }
  if (!from._internal_group().empty()) {
    _internal_set_group(from._internal_group());
  }
  if (from._internal_allow_remote() != 0) {
    _internal_set_allow_remote(from._internal_allow_remote());
  }
  if (from._internal_wait() != 0) {
    _internal_set_wait(from._internal_wait());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FTaskProto::CopyFrom(const FTaskProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FTaskProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTaskProto::IsInitialized() const {
  return true;
}

void FTaskProto::InternalSwap(FTaskProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dependence_.InternalSwap(&other->dependence_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &caption_, lhs_arena,
      &other->caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cmd_, lhs_arena,
      &other->cmd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &params_, lhs_arena,
      &other->params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_, lhs_arena,
      &other->group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FTaskProto, priority_)
      + sizeof(FTaskProto::priority_)
      - PROTOBUF_FIELD_OFFSET(FTaskProto, allow_remote_)>(
          reinterpret_cast<char*>(&allow_remote_),
          reinterpret_cast<char*>(&other->allow_remote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FTaskProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FTaskProto* Arena::CreateMaybeMessage< ::FTaskProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FTaskProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
