// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exception.proto

#include "exception.pb.h"

#if defined(PLATFORM_WINDOWS)
#pragma warning(disable : 4125 4800)
#endif

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr FException::FException(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buildid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exechost_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , arguments_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workingdir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exitcode_(0){}
struct FExceptionDefaultTypeInternal {
  constexpr FExceptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FExceptionDefaultTypeInternal() {}
  union {
    FException _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FExceptionDefaultTypeInternal _FException_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_exception_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_exception_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_exception_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_exception_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FException, timestamp_),
  PROTOBUF_FIELD_OFFSET(::FException, buildid_),
  PROTOBUF_FIELD_OFFSET(::FException, exechost_),
  PROTOBUF_FIELD_OFFSET(::FException, mac_),
  PROTOBUF_FIELD_OFFSET(::FException, exitcode_),
  PROTOBUF_FIELD_OFFSET(::FException, application_),
  PROTOBUF_FIELD_OFFSET(::FException, arguments_),
  PROTOBUF_FIELD_OFFSET(::FException, workingdir_),
  PROTOBUF_FIELD_OFFSET(::FException, description_),
  PROTOBUF_FIELD_OFFSET(::FException, logfile_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FException)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FException_default_instance_),
};

const char descriptor_table_protodef_exception_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017exception.proto\"\303\001\n\nFException\022\021\n\tTime"
  "Stamp\030\001 \001(\t\022\017\n\007BuildId\030\002 \001(\t\022\020\n\010ExecHost"
  "\030\003 \001(\t\022\013\n\003Mac\030\004 \001(\t\022\020\n\010ExitCode\030\005 \001(\005\022\023\n"
  "\013Application\030\006 \001(\t\022\021\n\tArguments\030\007 \001(\t\022\022\n"
  "\nWorkingDir\030\010 \001(\t\022\023\n\013Description\030\t \001(\t\022\017"
  "\n\007LogFile\030\n \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_exception_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_exception_2eproto = {
  false, false, 223, descriptor_table_protodef_exception_2eproto, "exception.proto", 
  &descriptor_table_exception_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_exception_2eproto::offsets,
  file_level_metadata_exception_2eproto, file_level_enum_descriptors_exception_2eproto, file_level_service_descriptors_exception_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_exception_2eproto_getter() {
  return &descriptor_table_exception_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_exception_2eproto(&descriptor_table_exception_2eproto);

// ===================================================================

class FException::_Internal {
 public:
};

FException::FException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FException)
}
FException::FException(const FException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp(), 
      GetArenaForAllocation());
  }
  buildid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buildid().empty()) {
    buildid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buildid(), 
      GetArenaForAllocation());
  }
  exechost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exechost().empty()) {
    exechost_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exechost(), 
      GetArenaForAllocation());
  }
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac().empty()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArenaForAllocation());
  }
  application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application().empty()) {
    application_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application(), 
      GetArenaForAllocation());
  }
  arguments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_arguments().empty()) {
    arguments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_arguments(), 
      GetArenaForAllocation());
  }
  workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workingdir().empty()) {
    workingdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workingdir(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  logfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logfile().empty()) {
    logfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logfile(), 
      GetArenaForAllocation());
  }
  exitcode_ = from.exitcode_;
  // @@protoc_insertion_point(copy_constructor:FException)
}

void FException::SharedCtor() {
timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buildid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exechost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
arguments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
workingdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exitcode_ = 0;
}

FException::~FException() {
  // @@protoc_insertion_point(destructor:FException)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FException::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buildid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exechost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arguments_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workingdir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FException::ArenaDtor(void* object) {
  FException* _this = reinterpret_cast< FException* >(object);
  (void)_this;
}
void FException::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FException::Clear() {
// @@protoc_insertion_point(message_clear_start:FException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.ClearToEmpty();
  buildid_.ClearToEmpty();
  exechost_.ClearToEmpty();
  mac_.ClearToEmpty();
  application_.ClearToEmpty();
  arguments_.ClearToEmpty();
  workingdir_.ClearToEmpty();
  description_.ClearToEmpty();
  logfile_.ClearToEmpty();
  exitcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FException::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string TimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.TimeStamp"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BuildId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_buildid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.BuildId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ExecHost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exechost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.ExecHost"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.Mac"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ExitCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exitcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Application = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_application();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.Application"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Arguments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_arguments();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.Arguments"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string WorkingDir = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_workingdir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.WorkingDir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Description = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.Description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LogFile = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_logfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FException.LogFile"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FException::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FException)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string TimeStamp = 1;
  if (!this->_internal_timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.TimeStamp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timestamp(), target);
  }

  // string BuildId = 2;
  if (!this->_internal_buildid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buildid().data(), static_cast<int>(this->_internal_buildid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.BuildId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_buildid(), target);
  }

  // string ExecHost = 3;
  if (!this->_internal_exechost().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exechost().data(), static_cast<int>(this->_internal_exechost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.ExecHost");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exechost(), target);
  }

  // string Mac = 4;
  if (!this->_internal_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.Mac");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mac(), target);
  }

  // int32 ExitCode = 5;
  if (this->_internal_exitcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_exitcode(), target);
  }

  // string Application = 6;
  if (!this->_internal_application().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application().data(), static_cast<int>(this->_internal_application().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.Application");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_application(), target);
  }

  // string Arguments = 7;
  if (!this->_internal_arguments().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arguments().data(), static_cast<int>(this->_internal_arguments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.Arguments");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_arguments(), target);
  }

  // string WorkingDir = 8;
  if (!this->_internal_workingdir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workingdir().data(), static_cast<int>(this->_internal_workingdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.WorkingDir");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_workingdir(), target);
  }

  // string Description = 9;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.Description");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_description(), target);
  }

  // string LogFile = 10;
  if (!this->_internal_logfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logfile().data(), static_cast<int>(this->_internal_logfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FException.LogFile");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_logfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FException)
  return target;
}

size_t FException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FException)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TimeStamp = 1;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // string BuildId = 2;
  if (!this->_internal_buildid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildid());
  }

  // string ExecHost = 3;
  if (!this->_internal_exechost().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exechost());
  }

  // string Mac = 4;
  if (!this->_internal_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  // string Application = 6;
  if (!this->_internal_application().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application());
  }

  // string Arguments = 7;
  if (!this->_internal_arguments().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arguments());
  }

  // string WorkingDir = 8;
  if (!this->_internal_workingdir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workingdir());
  }

  // string Description = 9;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string LogFile = 10;
  if (!this->_internal_logfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logfile());
  }

  // int32 ExitCode = 5;
  if (this->_internal_exitcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exitcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FException::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FException::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FException::GetClassData() const { return &_class_data_; }

void FException::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FException *>(to)->MergeFrom(
      static_cast<const FException &>(from));
}


void FException::MergeFrom(const FException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FException)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_timestamp().empty()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_buildid().empty()) {
    _internal_set_buildid(from._internal_buildid());
  }
  if (!from._internal_exechost().empty()) {
    _internal_set_exechost(from._internal_exechost());
  }
  if (!from._internal_mac().empty()) {
    _internal_set_mac(from._internal_mac());
  }
  if (!from._internal_application().empty()) {
    _internal_set_application(from._internal_application());
  }
  if (!from._internal_arguments().empty()) {
    _internal_set_arguments(from._internal_arguments());
  }
  if (!from._internal_workingdir().empty()) {
    _internal_set_workingdir(from._internal_workingdir());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_logfile().empty()) {
    _internal_set_logfile(from._internal_logfile());
  }
  if (from._internal_exitcode() != 0) {
    _internal_set_exitcode(from._internal_exitcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FException::CopyFrom(const FException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FException::IsInitialized() const {
  return true;
}

void FException::InternalSwap(FException* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timestamp_, lhs_arena,
      &other->timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buildid_, lhs_arena,
      &other->buildid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exechost_, lhs_arena,
      &other->exechost_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_, lhs_arena,
      &other->mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_, lhs_arena,
      &other->application_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &arguments_, lhs_arena,
      &other->arguments_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workingdir_, lhs_arena,
      &other->workingdir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logfile_, lhs_arena,
      &other->logfile_, rhs_arena
  );
  swap(exitcode_, other->exitcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FException::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_exception_2eproto_getter, &descriptor_table_exception_2eproto_once,
      file_level_metadata_exception_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FException* Arena::CreateMaybeMessage< ::FException >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FException >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
